{"version":3,"file":"reader.js","sources":["../reader.ts"],"sourcesContent":["/**\n * Utility functions for reading data from various types of source into various\n * forms.\n * @module\n */\nimport { concat, text } from \"./bytes.ts\";\nimport { asAsyncIterable, toAsyncIterable } from \"./reader/util.ts\";\nexport { toAsyncIterable };\nexport function toReadableStream(source, eventMap = undefined) {\n    const iterable = toAsyncIterable(source, eventMap);\n    return new ReadableStream({\n        async start(controller) {\n            try {\n                for await (const chunk of iterable) {\n                    controller.enqueue(chunk);\n                }\n            }\n            catch (error) {\n                controller.error(error);\n            }\n            finally {\n                controller.close();\n            }\n        }\n    });\n}\n/**\n * Reads all data from the iterable object or readable stream to an array.\n *\n * @example\n * ```ts\n * import { readAsArray } from \"@ayonli/jsext/read\";\n * import * as fs from \"node:fs\";\n *\n * const file = fs.createReadStream(\"./package.json\");\n * const chunks = await readAsArray(file);\n *\n * console.log(chunks);\n * ```\n */\nexport async function readAsArray(source) {\n    const iterable = asAsyncIterable(source);\n    const list = [];\n    for await (const chunk of iterable) {\n        list.push(chunk);\n    }\n    return list;\n}\n/**\n * Reads all data from the given source to an `ArrayBuffer`.\n */\nexport async function readAsArrayBuffer(source) {\n    if (typeof Blob === \"function\" && source instanceof Blob) {\n        return await source.arrayBuffer();\n    }\n    else if (typeof Buffer === \"function\" && source instanceof Buffer) {\n        return source.buffer.slice(0, source.length);\n    }\n    else if (source instanceof Uint8Array) {\n        return source.buffer;\n    }\n    const iterable = asAsyncIterable(source);\n    if (!iterable) {\n        throw new TypeError(\"The source is not an async iterable object.\");\n    }\n    const chunks = await readAsArray(iterable);\n    const bytes = concat(...chunks.map(chunk => new Uint8Array(chunk)));\n    return bytes.buffer;\n}\n/**\n * Reads all data from the given source to a `Blob`.\n */\nexport async function readAsBlob(source, type) {\n    if (source instanceof ArrayBuffer || source instanceof Uint8Array) {\n        return new Blob([source], { type });\n    }\n    const buffer = await readAsArrayBuffer(source);\n    return new Blob([buffer], { type });\n}\n/**\n * Reads all data from the given source to a data URL.\n */\nexport async function readAsDataURL(source, type) {\n    if (source instanceof ArrayBuffer) {\n        const base64 = text(new Uint8Array(source), \"base64\");\n        return `data:${type};base64,${base64}`;\n    }\n    else if (source instanceof Uint8Array) {\n        const base64 = text(source, \"base64\");\n        return `data:${type};base64,${base64}`;\n    }\n    const buffer = await readAsArrayBuffer(source);\n    const _bytes = new Uint8Array(buffer);\n    const base64 = text(_bytes, \"base64\");\n    return `data:${type};base64,${base64}`;\n}\n/**\n * Reads all data from the given source to an object URL.\n */\nexport async function readAsObjectURL(source, type) {\n    if (typeof Blob === \"function\" && source instanceof Blob) {\n        return URL.createObjectURL(source);\n    }\n    else if (source instanceof ArrayBuffer || source instanceof Uint8Array) {\n        const blob = new Blob([source], { type });\n        return URL.createObjectURL(blob);\n    }\n    const buffer = await readAsArrayBuffer(source);\n    const blob = new Blob([buffer], { type });\n    return URL.createObjectURL(blob);\n}\n/**\n * Reads all data from the given source to a string.\n */\nexport async function readAsText(source, encoding = undefined) {\n    if (typeof Blob === \"function\" && source instanceof Blob && !encoding) {\n        return await source.text();\n    }\n    else if (source instanceof ArrayBuffer || source instanceof Uint8Array) {\n        return new TextDecoder(encoding).decode(source);\n    }\n    const buffer = await readAsArrayBuffer(source);\n    return new TextDecoder(encoding).decode(buffer);\n}\n/**\n * Reads all data from the given source to a JSON object.\n */\nexport async function readAsJSON(source) {\n    const text = await readAsText(source);\n    return JSON.parse(text);\n}\n//# sourceMappingURL=reader.js.map"],"names":[],"mappings":"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"}