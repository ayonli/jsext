{"version":3,"file":"run.js","sources":["../run.ts"],"sourcesContent":["import chan from \"./chan.ts\";\nimport deprecate from \"./deprecate.ts\";\nimport { fromObject } from \"./error/index.ts\";\nimport { handleChannelMessage, isChannelMessage, isNode, isBun, isBeforeNode14 } from \"./util.ts\";\nimport parallel, { getConcurrencyNumber, sanitizeModuleId, createCallRequest, createWorker, isCallResponse, wrapArgs } from \"./parallel.ts\";\nlet workerPool = [];\n// The worker consumer queue is nothing but a callback list, once a worker is available, the runner\n// pop a consumer and run the callback, which will retry gaining the worker and retry the task.\nconst workerConsumerQueue = [];\nasync function run(script, args = undefined, options = undefined) {\n    if (options === null || options === void 0 ? void 0 : options.workerEntry) {\n        deprecate(\"options.workerEntry\", run, \"set `run.workerEntry` instead\");\n    }\n    const maxWorkers = parallel.maxWorkers || await getConcurrencyNumber;\n    const modId = sanitizeModuleId(script);\n    const msg = createCallRequest({\n        script: modId,\n        fn: (options === null || options === void 0 ? void 0 : options.fn) || \"default\",\n        args: args !== null && args !== void 0 ? args : [],\n    });\n    const entry = (options === null || options === void 0 ? void 0 : options.workerEntry) || parallel.workerEntry;\n    const adapter = (options === null || options === void 0 ? void 0 : options.adapter) || \"worker_threads\";\n    const serialization = adapter === \"worker_threads\"\n        ? \"advanced\"\n        : ((options === null || options === void 0 ? void 0 : options.serialization) || (isBeforeNode14 ? \"json\" : \"advanced\"));\n    let poolRecord = workerPool.find(item => {\n        return item.adapter === adapter\n            && item.serialization === serialization\n            && !item.busy;\n    });\n    if (poolRecord) {\n        poolRecord.busy = true;\n    }\n    else if (workerPool.length < maxWorkers) {\n        // Fill the worker pool regardless the current call should keep-alive or not,\n        // this will make sure that the total number of workers will not exceed the\n        // `run.maxWorkers`. If the the call doesn't keep-alive the worker, it will be\n        // cleaned after the call.\n        workerPool.push(poolRecord = {\n            getWorker: createWorker({ entry, adapter, serialization }),\n            adapter,\n            serialization,\n            busy: true,\n        });\n    }\n    else {\n        // Put the current call in the consumer queue if there are no workers available,\n        // once an existing call finishes, the queue will pop the its head consumer and\n        // retry.\n        return new Promise((resolve) => {\n            workerConsumerQueue.push(resolve);\n        }).then(() => run(modId, args, options));\n    }\n    let error = null;\n    let result;\n    let resolver;\n    let channel = undefined;\n    let workerId;\n    let release;\n    let terminate = () => Promise.resolve(void 0);\n    const timeout = (options === null || options === void 0 ? void 0 : options.timeout) ? setTimeout(() => {\n        const err = new Error(`operation timeout after ${options.timeout}ms`);\n        error = err;\n        if (resolver) {\n            resolver.reject(err);\n        }\n        terminate();\n    }, options.timeout) : null;\n    const handleMessage = (msg) => {\n        var _a;\n        if (isChannelMessage(msg)) {\n            handleChannelMessage(msg);\n        }\n        else if (isCallResponse(msg)) {\n            timeout && clearTimeout(timeout);\n            if (msg.type === \"error\") {\n                return handleError(msg.error);\n            }\n            else if (msg.type === \"return\") {\n                if (options === null || options === void 0 ? void 0 : options.keepAlive) {\n                    // Release before resolve.\n                    release === null || release === void 0 ? void 0 : release();\n                    if (workerConsumerQueue.length) {\n                        // Queued consumer now has chance to gain the worker.\n                        (_a = workerConsumerQueue.shift()) === null || _a === void 0 ? void 0 : _a();\n                    }\n                }\n                else {\n                    terminate();\n                }\n                if (resolver) {\n                    resolver.resolve(msg.value);\n                }\n                else {\n                    result = { value: msg.value };\n                }\n                channel === null || channel === void 0 ? void 0 : channel.close();\n            }\n            else if (msg.type === \"yield\") {\n                if (msg.done) {\n                    // The final message of yield event is the return value.\n                    handleMessage({ type: \"return\", value: msg.value });\n                }\n                else {\n                    channel === null || channel === void 0 ? void 0 : channel.push(msg.value);\n                }\n            }\n        }\n    };\n    const handleError = (err) => {\n        err = err instanceof Error\n            ? err\n            : (typeof err === \"object\" ? fromObject(err) : err);\n        error = err;\n        timeout && clearTimeout(timeout);\n        if (resolver) {\n            resolver.reject(err);\n        }\n        channel === null || channel === void 0 ? void 0 : channel.close(err);\n    };\n    const handleExit = () => {\n        var _a;\n        timeout && clearTimeout(timeout);\n        if (poolRecord) {\n            // Clean the pool before resolve.\n            workerPool = workerPool.filter(record => record !== poolRecord);\n            if (workerConsumerQueue.length) {\n                // Queued consumer now has chance to create new worker.\n                (_a = workerConsumerQueue.shift()) === null || _a === void 0 ? void 0 : _a();\n            }\n        }\n        if (resolver) {\n            error ? resolver.reject(error) : resolver.resolve(void 0);\n        }\n        else if (!error && !result) {\n            result = { value: void 0 };\n        }\n        channel === null || channel === void 0 ? void 0 : channel.close(error);\n    };\n    if (isNode || isBun) {\n        if (adapter === \"child_process\") {\n            const record = await poolRecord.getWorker;\n            const worker = record.worker;\n            workerId = record.workerId;\n            release = () => {\n                worker.unref(); // allow the main thread to exit if the event loop is empty\n                // Remove the event listener so that later calls will not mess up.\n                worker.off(\"message\", handleMessage);\n                poolRecord && (poolRecord.busy = false);\n            };\n            terminate = () => Promise.resolve(void worker.kill(1));\n            worker.ref(); // prevent premature exit in the main thread\n            worker.on(\"message\", handleMessage);\n            worker.once(\"error\", handleError);\n            worker.once(\"exit\", handleExit);\n            if (error) {\n                // The worker take too long to start and timeout error already thrown.\n                await terminate();\n                throw error;\n            }\n            const { args } = wrapArgs(msg.args, Promise.resolve(worker));\n            msg.args = args;\n            worker.send(msg);\n        }\n        else if (isNode) {\n            const record = await poolRecord.getWorker;\n            const worker = record.worker;\n            workerId = record.workerId;\n            release = () => {\n                worker.unref();\n                worker.off(\"message\", handleMessage);\n                poolRecord && (poolRecord.busy = false);\n            };\n            terminate = async () => void (await worker.terminate());\n            worker.ref();\n            worker.on(\"message\", handleMessage);\n            worker.once(\"error\", handleError);\n            worker.once(\"messageerror\", handleError);\n            worker.once(\"exit\", handleExit);\n            if (error) {\n                await terminate();\n                throw error;\n            }\n            const { args, transferable } = wrapArgs(msg.args, Promise.resolve(worker));\n            msg.args = args;\n            worker.postMessage(msg, transferable);\n        }\n        else { // isBun\n            const record = await poolRecord.getWorker;\n            const worker = record.worker;\n            workerId = record.workerId;\n            release = () => {\n                worker.onmessage = null;\n                poolRecord && (poolRecord.busy = false);\n            };\n            terminate = async () => {\n                await Promise.resolve(worker.terminate());\n                handleExit();\n            };\n            worker.onmessage = (ev) => handleMessage(ev.data);\n            worker.onerror = (ev) => handleMessage(ev.error || new Error(ev.message));\n            worker.onmessageerror = () => {\n                handleError(new Error(\"unable to deserialize the message\"));\n            };\n            if (error) {\n                await terminate();\n                throw error;\n            }\n            const { args, transferable } = wrapArgs(msg.args, Promise.resolve(worker));\n            msg.args = args;\n            worker.postMessage(msg, transferable);\n        }\n    }\n    else {\n        const record = await poolRecord.getWorker;\n        const worker = record.worker;\n        workerId = record.workerId;\n        release = () => {\n            worker.onmessage = null;\n            poolRecord && (poolRecord.busy = false);\n        };\n        terminate = async () => {\n            await Promise.resolve(worker.terminate());\n            handleExit();\n        };\n        worker.onmessage = (ev) => handleMessage(ev.data);\n        worker.onerror = (ev) => handleMessage(ev.error || new Error(ev.message));\n        worker.onmessageerror = () => {\n            handleError(new Error(\"unable to deserialize the message\"));\n        };\n        if (error) {\n            await terminate();\n            throw error;\n        }\n        const { args, transferable } = wrapArgs(msg.args, Promise.resolve(worker));\n        msg.args = args;\n        worker.postMessage(msg, transferable);\n    }\n    return {\n        workerId,\n        async abort(reason = undefined) {\n            timeout && clearTimeout(timeout);\n            if (reason) {\n                if (reason instanceof Error) {\n                    error = reason;\n                }\n                else if (typeof reason === \"string\") {\n                    error = new Error(reason);\n                }\n                else {\n                    // @ts-ignore\n                    error = new Error(\"operation aborted\", { cause: reason });\n                }\n            }\n            await terminate();\n        },\n        async result() {\n            return await new Promise((resolve, reject) => {\n                if (error) {\n                    reject(error);\n                }\n                else if (result) {\n                    resolve(result.value);\n                }\n                else {\n                    resolver = { resolve, reject };\n                }\n            });\n        },\n        iterate() {\n            if (resolver) {\n                throw new Error(\"result() has been called\");\n            }\n            else if (result) {\n                throw new TypeError(\"the response is not iterable\");\n            }\n            channel = chan(Infinity);\n            return {\n                [Symbol.asyncIterator]: channel[Symbol.asyncIterator].bind(channel),\n            };\n        },\n    };\n}\n// backward compatibility\nObject.defineProperties(run, {\n    maxWorkers: {\n        set(v) {\n            parallel.maxWorkers = v;\n        },\n        get() {\n            return parallel.maxWorkers;\n        },\n    },\n    workerEntry: {\n        set(v) {\n            parallel.workerEntry = v;\n        },\n        get() {\n            return parallel.workerEntry;\n        },\n    },\n});\nexport default run;\n//# sourceMappingURL=run.js.map"],"names":[],"mappings":"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"}