{"version":3,"file":"sse.js","sources":["../sse.ts"],"sourcesContent":["var _a;\n/**\n * This module provides APIs for working with server-sent events. The {@link SSE}\n * class can be used to send messages to the client, while the\n * {@link EventsReader} class can be used to read messages from the server\n * response.\n *\n * @example\n * ```ts\n * // server.ts (Deno)\n * import { SSE } from \"@ayonli/jsext/sse\";\n *\n * Deno.serve(async req => {\n *     const sse = new SSE(req);\n *\n *     setTimeout(() => {\n *         sse.dispatchEvent(new MessageEvent(\"my-event\", {\n *             data: \"Hello, World!\",\n *             lastEventId: \"1\",\n *         }));\n *     }, 1_000);\n *\n *     return sse.response;\n * });\n * ```\n *\n * @example\n * ```ts\n * // client.ts\n * import { EventsReader } from \"@ayonli/jsext/sse\";\n *\n * const response = await fetch(\"http://localhost:3000\", {\n *     method: \"POST\",\n *     headers: {\n *         \"Accept\": \"text/event-stream\",\n *     },\n * });\n * const reader = new EventsReader(response);\n *\n * reader.addEventListener(\"my-event\", (ev) => {\n *     console.log(ev.data); // \"Hello, World!\"\n * }); * ```\n *\n * @module\n */\nimport bytes from \"./bytes.ts\";\nconst SSEMarkClosed = new Set();\nconst _lastEventId = Symbol.for(\"lastEventId\");\nconst _closed = Symbol.for(\"closed\");\nconst _response = Symbol.for(\"response\");\nconst _writer = Symbol.for(\"writer\");\nconst _reader = Symbol.for(\"reader\");\nconst _reconnectionTime = Symbol.for(\"reconnectionTime\");\n/**\n * A server-sent events (SSE) implementation that can be used to send messages\n * to the client. This implementation is based on the `EventTarget` interface\n * and conforms the web standard.\n *\n * @example\n * ```ts\n * // server.ts (Deno)\n * import { SSE } from \"@ayonli/jsext/sse\";\n *\n * Deno.serve(async req => {\n *     const sse = new SSE(req);\n *\n *     setTimeout(() => {\n *         sse.dispatchEvent(new MessageEvent(\"my-event\", {\n *             data: \"Hello, World!\",\n *             lastEventId: \"1\",\n *         }));\n *     }, 1_000);\n *\n *     return sse.response;\n * });\n * ```\n */\nexport class SSE extends EventTarget {\n    constructor(request, options = {}) {\n        var _b, _c;\n        super();\n        this[_lastEventId] = (_b = request.headers.get(\"Last-Event-ID\")) !== null && _b !== void 0 ? _b : \"\";\n        this[_reconnectionTime] = (_c = options.reconnectionTime) !== null && _c !== void 0 ? _c : 0;\n        this[_closed] = this[_lastEventId]\n            ? SSEMarkClosed.has(this[_lastEventId])\n            : false;\n        const _this = this;\n        const { writable, readable } = new TransformStream();\n        this[_writer] = writable.getWriter();\n        const reader = readable.getReader();\n        const _readable = new ReadableStream({\n            async start(controller) {\n                controller.enqueue(bytes(\"\"));\n            },\n            async pull(controller) {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        controller.close();\n                        break;\n                    }\n                    controller.enqueue(value);\n                }\n            },\n            async cancel(reason) {\n                await reader.cancel(reason);\n                _this[_closed] = true;\n                _this.dispatchEvent(createCloseEvent());\n            }\n        });\n        this[_response] = new Response(this.closed ? null : _readable, {\n            status: this.closed ? 204 : 200,\n            headers: {\n                \"Content-Type\": \"text/event-stream\",\n                \"Cache-Control\": \"no-cache\",\n                \"Connection\": \"keep-alive\",\n            },\n        });\n        this.closed && this.close();\n    }\n    /**\n     * The time in milliseconds that instructs the client to wait before\n     * reconnecting.\n     */\n    get retry() {\n        return this[_reconnectionTime];\n    }\n    /**\n     * The last event ID that the server has sent.\n     */\n    get lastEventId() {\n        return this[_lastEventId];\n    }\n    /**\n     * Indicates whether the connection has been closed.\n     */\n    get closed() {\n        return this[_closed];\n    }\n    /**\n     * The response that will be sent to the client.\n     */\n    get response() {\n        return this[_response];\n    }\n    dispatchEvent(event) {\n        if (event instanceof MessageEvent) {\n            const _event = event;\n            if (event.type === \"message\") {\n                this.send(_event.data, _event.lastEventId).catch(() => { });\n            }\n            else {\n                this.sendEvent(_event.type, _event.data, _event.lastEventId)\n                    .catch(() => { });\n            }\n            return true;\n        }\n        else {\n            return super.dispatchEvent(event);\n        }\n    }\n    /**\n     * Sends a message to the client.\n     *\n     * The client (`EventSource` or {@link EventsReader}) will receive the\n     * message as a `MessageEvent`, which can be listened to using the\n     * `message` event.\n     *\n     * @param eventId If specified, the client will remember the value as the\n     * last event ID and will send it back to the server when reconnecting.\n     */\n    async send(data, eventId = undefined) {\n        const frames = data.split(/\\r\\n|\\r/);\n        this[_lastEventId] = eventId !== null && eventId !== void 0 ? eventId : \"\";\n        const writer = this[_writer];\n        if (eventId) {\n            await writer.write(bytes(`id: ${eventId}\\n`));\n        }\n        if (this[_reconnectionTime]) {\n            await writer.write(bytes(`retry: ${this[_reconnectionTime]}\\n`));\n        }\n        for (const frame of frames) {\n            await writer.write(bytes(`data: ${frame}\\n`));\n        }\n        await writer.write(bytes(\"\\n\"));\n    }\n    /**\n     * Sends a custom event to the client.\n     *\n     * The client (`EventSource` or {@link EventsReader}) will receive the\n     * event as a `MessageEvent`, which can be listened to using the custom\n     * event name.\n     *\n     * @param eventId If specified, the client will remember the value as the\n     * last event ID and will send it back to the server when reconnecting.\n     */\n    async sendEvent(event, data, eventId = undefined) {\n        await this[_writer].write(bytes(`event: ${event}\\n`));\n        return this.send(data, eventId);\n    }\n    /**\n     * Closes the connection and instructs the client not to reconnect.\n     */\n    async close() {\n        if (this.lastEventId) {\n            if (!SSEMarkClosed.has(this.lastEventId)) {\n                SSEMarkClosed.add(this.lastEventId);\n            }\n            else {\n                SSEMarkClosed.delete(this.lastEventId);\n            }\n        }\n        await this[_writer].close();\n        this[_closed] = true;\n        this.dispatchEvent(createCloseEvent());\n    }\n}\n/**\n * An SSE (server-sent events) client that reads messages from the server\n * response. Unlike the `EventSource` API, which takes a URL and only supports\n * GET request, this implementation accepts a `Response` object and reads the\n * messages from its body, the response can be generated from any type of\n * request, usually returned from the `fetch` function.\n *\n * This client doesn't support reconnection, however, we can add a event\n * listener to the close event and re-create the client manually.\n *\n * @example\n * ```ts\n * // client.ts\n * import { EventsReader } from \"@ayonli/jsext/sse\";\n *\n * const response = await fetch(\"http://localhost:3000\", {\n *     method: \"POST\",\n *     headers: {\n *         \"Accept\": \"text/event-stream\",\n *     },\n * });\n * const reader = new EventsReader(response);\n *\n * reader.addEventListener(\"my-event\", (ev) => {\n *     console.log(ev.data); // \"Hello, World!\"\n * });\n * ```\n */\nexport class EventsReader extends EventTarget {\n    constructor(response) {\n        var _b;\n        super();\n        this[_a] = false;\n        if (!response.body) {\n            throw new TypeError(\"The response does not have a body.\");\n        }\n        else if (response.bodyUsed) {\n            throw new TypeError(\"The response body has already been used.\");\n        }\n        else if (response.body.locked) {\n            throw new TypeError(\"The response body is locked.\");\n        }\n        else if (!((_b = response.headers.get(\"Content-Type\")) === null || _b === void 0 ? void 0 : _b.startsWith(\"text/event-stream\"))) {\n            throw new TypeError(\"The response is not an event stream.\");\n        }\n        this[_reader] = response.body.getReader();\n        this.read();\n    }\n    get retry() {\n        return this[_reconnectionTime];\n    }\n    get lastEventId() {\n        return this[_lastEventId];\n    }\n    get closed() {\n        return this[_closed];\n    }\n    async read() {\n        var _b;\n        const reader = this[_reader];\n        const decoder = new TextDecoder();\n        let buffer = \"\";\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) {\n                    this[_closed] = true;\n                    this.dispatchEvent(createCloseEvent());\n                    break;\n                }\n                buffer += decoder.decode(value);\n                const chunks = buffer.split(/\\r\\n\\r\\n|\\n\\n/);\n                if (chunks.length === 1) {\n                    continue;\n                }\n                else {\n                    buffer = chunks.pop();\n                }\n                for (const chunk of chunks) {\n                    const lines = chunk.split(/\\r\\n|\\n/);\n                    let data = \"\";\n                    let type = \"message\";\n                    for (const line of lines) {\n                        if (line.startsWith(\"data:\")) {\n                            if (data) {\n                                data += \"\\n\" + line.slice(6).trim();\n                            }\n                            else {\n                                data = line.slice(6).trim();\n                            }\n                        }\n                        else if (line.startsWith(\"event:\")) {\n                            type = line.slice(6).trim();\n                        }\n                        else if (line.startsWith(\"id:\")) {\n                            this[_lastEventId] = line.slice(3).trim();\n                        }\n                        else if (line.startsWith(\"retry:\")) {\n                            const time = parseInt(line.slice(6).trim());\n                            if (!isNaN(time)) {\n                                this[_reconnectionTime] = time;\n                            }\n                        }\n                    }\n                    this.dispatchEvent(new MessageEvent(type, {\n                        lastEventId: (_b = this[_lastEventId]) !== null && _b !== void 0 ? _b : \"\",\n                        data,\n                    }));\n                }\n            }\n        }\n        catch (error) {\n            this[_closed] = true;\n            this.dispatchEvent(createErrorEvent({ error }));\n            this.dispatchEvent(createCloseEvent());\n        }\n    }\n    async close() {\n        await this[_reader].cancel();\n        this[_closed] = true;\n    }\n    addEventListener(event, listener, options) {\n        return super.addEventListener(event, listener, options);\n    }\n}\n_a = _closed;\nfunction createCloseEvent(options = {}) {\n    var _b, _c, _d;\n    if (typeof CloseEvent === \"function\") {\n        return new CloseEvent(\"close\", options);\n    }\n    else {\n        const event = new Event(\"close\", {\n            bubbles: false,\n            cancelable: false,\n            composed: false,\n        });\n        Object.defineProperties(event, {\n            code: { value: (_b = options.code) !== null && _b !== void 0 ? _b : 0 },\n            reason: { value: (_c = options.reason) !== null && _c !== void 0 ? _c : \"\" },\n            wasClean: { value: (_d = options.wasClean) !== null && _d !== void 0 ? _d : false },\n        });\n        return event;\n    }\n}\nfunction createErrorEvent(options = {}) {\n    var _b, _c, _d, _e, _f;\n    if (typeof ErrorEvent === \"function\") {\n        return new ErrorEvent(\"error\", options);\n    }\n    else {\n        const event = new Event(\"error\", {\n            bubbles: false,\n            cancelable: false,\n            composed: false,\n        });\n        Object.defineProperties(event, {\n            message: { value: (_b = options === null || options === void 0 ? void 0 : options.message) !== null && _b !== void 0 ? _b : \"\" },\n            filename: { value: (_c = options === null || options === void 0 ? void 0 : options.filename) !== null && _c !== void 0 ? _c : \"\" },\n            lineno: { value: (_d = options === null || options === void 0 ? void 0 : options.lineno) !== null && _d !== void 0 ? _d : 0 },\n            colno: { value: (_e = options === null || options === void 0 ? void 0 : options.colno) !== null && _e !== void 0 ? _e : 0 },\n            error: { value: (_f = options === null || options === void 0 ? void 0 : options.error) !== null && _f !== void 0 ? _f : undefined },\n        });\n        return event;\n    }\n}\n//# sourceMappingURL=sse.js.map"],"names":[],"mappings":"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"}