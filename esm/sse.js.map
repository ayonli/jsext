{"version":3,"file":"sse.js","sources":["../sse.ts"],"sourcesContent":["/**\n * This module provides tools for working with server-sent events.\n *\n * The {@link SSE} class is used to handle SSE requests and send messages to the\n * client, while the {@link EventClient} class is used to process messages sent\n * by the server.\n *\n * NOTE: this module is based on the `Request` and `Response` APIs, in Node.js,\n * it requires Node.js v18.3 or above.\n *\n * @module\n * @experimental\n */\nvar _a, _b, _c;\nimport { createCloseEvent, createErrorEvent } from \"./event.ts\";\nconst SSEMarkClosed = new Set();\nconst _lastEventId = Symbol.for(\"lastEventId\");\nconst _closed = Symbol.for(\"closed\");\nconst _response = Symbol.for(\"response\");\nconst _writer = Symbol.for(\"writer\");\nconst _reader = Symbol.for(\"reader\");\nconst _reconnectionTime = Symbol.for(\"reconnectionTime\");\nconst encoder = new TextEncoder();\n/**\n * A server-sent events (SSE) implementation that can be used to send messages\n * to the client. This implementation is based on the `EventTarget` interface\n * and conforms the web standard.\n *\n * **Events:**\n *\n * - `close` - Dispatched when the connection is closed.\n *\n * @example\n * ```ts\n * // with Web APIs\n * import { SSE } from \"@ayonli/jsext/sse\";\n *\n * export default {\n *     async fetch(req: Request) {\n *         const sse = new SSE(req);\n *\n *         sse.addEventListener(\"close\", (ev) => {\n *             console.log(`The connection is closed, reason: ${ev.reason}`);\n *         });\n *\n *         setTimeout(() => {\n *             sse.dispatchEvent(new MessageEvent(\"my-event\", {\n *                 data: \"Hello, World!\",\n *                 lastEventId: \"1\",\n *             }));\n *         }, 1_000);\n *\n *         return sse.response;\n *     }\n * }\n * ```\n *\n * @example\n * ```ts\n * // with Node.js APIs\n * import * as http from \"node:http\";\n * import { SSE } from \"@ayonli/jsext/sse\";\n *\n * const server = http.createServer((req, res) => {\n *     const sse = new SSE(req, res);\n *\n *     sse.addEventListener(\"close\", (ev) => {\n *         console.log(`The connection is closed, reason: ${ev.reason}`);\n *     });\n *\n *     setTimeout(() => {\n *         sse.dispatchEvent(new MessageEvent(\"my-event\", {\n *             data: \"Hello, World!\",\n *             lastEventId: \"1\",\n *         }));\n *     }, 1_000);\n * });\n *\n * server.listen(3000);\n * ```\n */\nexport class SSE extends EventTarget {\n    constructor(request, ...args) {\n        var _d, _e, _f, _g, _h;\n        super();\n        const isNodeRequest = \"socket\" in request && \"socket\" in args[0];\n        let options;\n        if (isNodeRequest) {\n            const req = request;\n            this[_lastEventId] = String((_d = req.headers[\"last-event-id\"]) !== null && _d !== void 0 ? _d : \"\");\n            options = (_e = args[1]) !== null && _e !== void 0 ? _e : {};\n        }\n        else {\n            this[_lastEventId] = (_f = request.headers.get(\"Last-Event-ID\")) !== null && _f !== void 0 ? _f : \"\";\n            options = (_g = args[0]) !== null && _g !== void 0 ? _g : {};\n        }\n        this[_reconnectionTime] = (_h = options.reconnectionTime) !== null && _h !== void 0 ? _h : 0;\n        this[_closed] = this[_lastEventId]\n            ? SSEMarkClosed.has(this[_lastEventId])\n            : false;\n        const resInit = {\n            status: this.closed ? 204 : 200,\n            statusText: this.closed ? \"No Content\" : \"OK\",\n            headers: {\n                \"Content-Type\": \"text/event-stream\",\n                \"Cache-Control\": \"no-cache\",\n                \"Connection\": \"keep-alive\",\n            },\n        };\n        const _this = this;\n        if (isNodeRequest) {\n            this[_response] = null;\n            const res = args[0];\n            const writable = new WritableStream({\n                write(chunk) {\n                    res.write(chunk);\n                },\n                close() {\n                    res.end();\n                    _this.dispatchEvent(createCloseEvent(\"close\", { wasClean: true }));\n                },\n                abort(err) {\n                    res.destroy(err);\n                },\n            });\n            this[_writer] = writable.getWriter();\n            for (const [name, value] of Object.entries(resInit.headers)) {\n                // Use `setHeader` to set headers instead of passing them to `writeHead`,\n                // it seems in Deno, the headers are not written to the response if they\n                // are passed to `writeHead`.\n                res.setHeader(name, value);\n            }\n            res.writeHead(resInit.status, resInit.statusText);\n        }\n        else {\n            const { writable, readable } = new TransformStream();\n            const reader = readable.getReader();\n            const _readable = new ReadableStream({\n                async start(controller) {\n                    controller.enqueue(new Uint8Array(0));\n                },\n                async pull(controller) {\n                    while (true) {\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            try {\n                                controller.close();\n                            }\n                            catch (_d) { }\n                            _this.dispatchEvent(createCloseEvent(\"close\", { wasClean: true }));\n                            break;\n                        }\n                        controller.enqueue(value);\n                    }\n                },\n                async cancel(reason) {\n                    _this[_closed] = true;\n                    await reader.cancel(reason);\n                }\n            });\n            this[_writer] = writable.getWriter();\n            this[_response] = new Response(this.closed ? null : _readable, resInit);\n        }\n        this.closed && this.close();\n    }\n    /**\n     * The last event ID that the server has sent.\n     */\n    get lastEventId() {\n        return this[_lastEventId];\n    }\n    /**\n     * Indicates whether the connection has been closed.\n     */\n    get closed() {\n        return this[_closed];\n    }\n    /**\n     * The response that will be sent to the client, only available when the\n     * instance is created with the `Request` API.\n     */\n    get response() {\n        return this[_response];\n    }\n    addEventListener(event, listener, options) {\n        return super.addEventListener(event, listener, options);\n    }\n    dispatchEvent(event) {\n        if (event instanceof MessageEvent) {\n            const _event = event;\n            if (event.type === \"message\") {\n                this.send(_event.data, _event.lastEventId).catch(() => { });\n            }\n            else {\n                this.sendEvent(_event.type, _event.data, _event.lastEventId)\n                    .catch(() => { });\n            }\n            return !event.cancelable || !event.defaultPrevented;\n        }\n        else {\n            return super.dispatchEvent(event);\n        }\n    }\n    buildMessage(data, options = {}) {\n        let message = \"\";\n        if (options.id) {\n            this[_lastEventId] = options.id;\n            message += `id: ${options.id}\\n`;\n        }\n        if (options.event) {\n            message += `event: ${options.event}\\n`;\n        }\n        if (this[_reconnectionTime]) {\n            message += `retry: ${this[_reconnectionTime]}\\n`;\n        }\n        message += data.split(/\\r\\n|\\n/).map((line) => `data: ${line}\\n`).join(\"\");\n        message += \"\\n\";\n        return encoder.encode(message);\n    }\n    /**\n     * Sends a message to the client.\n     *\n     * The client (`EventSource` or {@link EventClient}) will receive the\n     * message as a `MessageEvent`, which can be listened to using the\n     * `message` event.\n     *\n     * @param eventId If specified, the client will remember the value as the\n     * last event ID and will send it back to the server when reconnecting.\n     */\n    async send(data, eventId = undefined) {\n        await this[_writer].write(this.buildMessage(data, { id: eventId }));\n    }\n    /**\n     * Sends a custom event to the client.\n     *\n     * The client (`EventSource` or {@link EventClient}) will receive the\n     * event as a `MessageEvent`, which can be listened to using the custom\n     * event name.\n     *\n     * @param eventId If specified, the client will remember the value as the\n     * last event ID and will send it back to the server when reconnecting.\n     */\n    async sendEvent(event, data, eventId = undefined) {\n        await this[_writer].write(this.buildMessage(data, { id: eventId, event }));\n    }\n    /**\n     * Closes the connection and instructs the client not to reconnect.\n     */\n    close() {\n        this[_writer].close().catch(() => { }).finally(() => {\n            this[_closed] = true;\n            if (this.lastEventId) {\n                if (!SSEMarkClosed.has(this.lastEventId)) {\n                    SSEMarkClosed.add(this.lastEventId);\n                }\n                else {\n                    SSEMarkClosed.delete(this.lastEventId);\n                }\n            }\n        });\n    }\n}\n/**\n * An SSE (server-sent events) client that consumes event messages sent by the\n * server. Unlike the `EventSource` API, which takes a URL and only supports\n * GET request, this implementation accepts a `Response` object and reads the\n * messages from its body, the response can be generated from any type of\n * request, usually returned from the `fetch` function.\n *\n * This client doesn't support reconnection, however, we can add a event\n * listener to the close event and re-create the client manually.\n *\n * **Events:**\n *\n * - `error` - Dispatched when an error occurs, such as network failure. After\n *   this event is dispatched, the connection will be closed and the `close`\n *   event will be dispatched.\n * - `close` - Dispatched when the connection is closed. If the connection is\n *   closed due to some error, the `error` event will be dispatched before this\n *   event, and the close event will have the `wasClean` set to `false`, and the\n *   `reason` property contains the error message, if any.\n * - `message` - Dispatched when a message with the default event type is\n *   received.\n * - custom events - Dispatched when a message with a custom event type is\n *   received.\n *\n * @example\n * ```ts\n * import { EventClient } from \"@ayonli/jsext/sse\";\n *\n * const response = await fetch(\"http://localhost:3000\", {\n *     method: \"POST\",\n *     headers: {\n *         \"Accept\": \"text/event-stream\",\n *     },\n * });\n * const client = new EventClient(response);\n *\n * client.addEventListener(\"close\", (ev) => {\n *     console.log(`The connection is closed, reason: ${ev.reason}`);\n *\n *     if (!ev.wasClean) {\n *         // perhaps to re-create the client\n *     }\n * });\n *\n * client.addEventListener(\"my-event\", (ev) => {\n *     console.log(`Received message from the server: ${ev.data}`);\n * });\n * ```\n */\nexport class EventClient extends EventTarget {\n    constructor(response) {\n        var _d;\n        super();\n        this[_a] = \"\";\n        this[_b] = 0;\n        this[_c] = false;\n        if (!response.body) {\n            throw new TypeError(\"The response does not have a body.\");\n        }\n        else if (response.bodyUsed) {\n            throw new TypeError(\"The response body has already been used.\");\n        }\n        else if (response.body.locked) {\n            throw new TypeError(\"The response body is locked.\");\n        }\n        else if (!((_d = response.headers.get(\"Content-Type\")) === null || _d === void 0 ? void 0 : _d.startsWith(\"text/event-stream\"))) {\n            throw new TypeError(\"The response is not an event stream.\");\n        }\n        this[_reader] = response.body.getReader();\n        this.readMessages(response.url ? new URL(response.url).origin : \"\");\n    }\n    /**\n     * The last event ID that the server has sent.\n     */\n    get lastEventId() {\n        return this[_lastEventId];\n    }\n    /**\n     * Indicates whether the connection has been closed.\n     */\n    get closed() {\n        return this[_closed];\n    }\n    /**\n     * The time in milliseconds that instructs the client to wait before\n     * reconnecting.\n     *\n     * NOTE: the client doesn't support reconnection, this value is only used\n     * when we want to re-create the client manually.\n     */\n    get retry() {\n        return this[_reconnectionTime];\n    }\n    async readMessages(origin) {\n        const reader = this[_reader];\n        const decoder = new TextDecoder();\n        let buffer = \"\";\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) {\n                    this[_closed] = true;\n                    this.dispatchEvent(createCloseEvent(\"close\", { wasClean: true }));\n                    break;\n                }\n                buffer += decoder.decode(value);\n                const chunks = buffer.split(/\\r\\n\\r\\n|\\n\\n/);\n                if (chunks.length === 1) {\n                    continue;\n                }\n                else {\n                    buffer = chunks.pop();\n                }\n                for (const chunk of chunks) {\n                    const lines = chunk.split(/\\r\\n|\\n/);\n                    let data = \"\";\n                    let type = \"message\";\n                    for (const line of lines) {\n                        if (line.startsWith(\"data:\") || line === \"data\") {\n                            let value = line.slice(5);\n                            if (value[0] === \" \") {\n                                value = value.slice(1);\n                            }\n                            if (data) {\n                                data += \"\\n\" + value;\n                            }\n                            else {\n                                data = value;\n                            }\n                        }\n                        else if (line.startsWith(\"event:\") || line === \"event\") {\n                            type = line.slice(6).trim();\n                        }\n                        else if (line.startsWith(\"id:\") || line === \"id\") {\n                            this[_lastEventId] = line.slice(3).trim();\n                        }\n                        else if (line.startsWith(\"retry:\")) {\n                            const time = parseInt(line.slice(6).trim());\n                            if (!isNaN(time) && time >= 0) {\n                                this[_reconnectionTime] = time;\n                            }\n                        }\n                    }\n                    this.dispatchEvent(new MessageEvent(type || \"message\", {\n                        lastEventId: this[_lastEventId],\n                        data,\n                        origin,\n                    }));\n                }\n            }\n        }\n        catch (error) {\n            this[_closed] = true;\n            this.dispatchEvent(createErrorEvent(\"error\", { error }));\n            this.dispatchEvent(createCloseEvent(\"close\", {\n                reason: error instanceof Error ? error.message : String(error),\n                wasClean: false,\n            }));\n        }\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        this[_reader].cancel().catch(() => { });\n    }\n    addEventListener(event, listener, options) {\n        return super.addEventListener(event, listener, options);\n    }\n}\n_a = _lastEventId, _b = _reconnectionTime, _c = _closed;\n//# sourceMappingURL=sse.js.map"],"names":[],"mappings":"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"}