{"version":3,"file":"module.js","sources":["../module.ts"],"sourcesContent":["/**\n * Utility functions for working with JavaScript modules.\n * @module\n */\nimport { isDeno, isNodeLike } from \"./env.ts\";\nimport { createReadableStream, readFile } from \"./fs.ts\";\nimport { isFileUrl, isUrl, resolve, toFsPath } from \"./path.ts\";\nimport { importWasm as webImportWasm } from \"./module/web.ts\";\nexport * from \"./module/web.ts\";\nconst wasmCache = new Map();\n/**\n * Imports a WebAssembly module from a URL or file path (relative to the current\n * working directory if not absolute), or from a {@link WebAssembly.Module}\n * object, returns the symbols exported by the module.\n *\n * This function is available in both the browser and server runtimes such as\n * Node.js, Deno, Bun and Cloudflare Workers.\n *\n * This function uses cache to avoid loading the same module multiple times.\n *\n * NOTE: Deno v2.1+ has built-in support for importing WebAssembly modules as\n * JavaScript modules, it's recommended to use the built-in `import` statement\n * to import WebAssembly modules directly for Deno programs.\n *\n * @param imports An object containing the values to be imported by the\n * WebAssembly module, allowing passing values from JavaScript to WebAssembly.\n *\n * @example\n * ```ts\n * import { importWasm } from \"@ayonli/jsext/module\";\n *\n * const { timestamp } = await importWasm<{\n *     timestamp: () => number; // function exported by the WebAssembly module\n * }>(\"./examples/simple.wasm\", {\n *     time: { // JavaScript namespace and functions passed into the WebAssembly module\n *         unix: () => {\n *             return Math.floor(Date.now() / 1000);\n *         },\n *     },\n * });\n *\n * console.log(\"The current timestamp is:\", timestamp());\n * ```\n *\n * NOTE: In Cloudflare Workers, this function cannot access the file system, we\n * need to import the WebAssembly module with a `import` statement or with the\n * `import()` function before we can use it. For example:\n *\n * @example\n * ```ts\n * // In Cloudflare Workers\n * import { importWasm } from \"@ayonli/jsext/module\";\n * import wasmModule from \"./examples/simple.wasm\";\n *\n * const { timestamp } = await importWasm<{\n *     timestamp: () => number; // function exported by the WebAssembly module\n * }>(wasmModule, {\n *     time: { // JavaScript namespace and functions passed into the WebAssembly module\n *         unix: () => {\n *             return Math.floor(Date.now() / 1000);\n *         },\n *     },\n * });\n *\n * console.log(\"The current timestamp is:\", timestamp());\n * ```\n */\nexport async function importWasm(module, imports = undefined) {\n    if ((!isNodeLike && !isDeno) ||\n        module instanceof WebAssembly.Module ||\n        (module instanceof URL && module.protocol !== \"file:\") ||\n        (typeof module === \"string\" && isUrl(module) && !isFileUrl(module))) {\n        return await webImportWasm(module, imports);\n    }\n    const src = typeof module === \"string\" ? module : module.href;\n    const filename = isFileUrl(src) ? toFsPath(src) : resolve(src);\n    if (typeof WebAssembly.instantiateStreaming === \"function\") {\n        let cache = wasmCache.get(filename);\n        if (!cache) {\n            const stream = createReadableStream(filename);\n            cache = Promise.resolve(new Response(stream, {\n                headers: { \"Content-Type\": \"application/wasm\" },\n            })).then(res => WebAssembly.instantiateStreaming(res, imports))\n                .then(ins => ins.instance.exports);\n            wasmCache.set(filename, cache);\n        }\n        return await cache;\n    }\n    else {\n        let cache = wasmCache.get(filename);\n        if (!cache) {\n            cache = readFile(filename)\n                .then(bytes => WebAssembly.instantiate(bytes, imports))\n                .then(ins => ins.instance.exports);\n            wasmCache.set(filename, cache);\n        }\n        return await cache;\n    }\n}\n//# sourceMappingURL=module.js.map"],"names":["webImportWasm"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAMA,MAAM,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,UAAU,CAAC,MAAM,EAAE,OAAO,GAAG,SAAS,EAAE;AAC9D,IAAI,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM;AAC/B,QAAQ,MAAM,YAAY,WAAW,CAAC,MAAM;AAC5C,SAAS,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,QAAQ,KAAK,OAAO,CAAC;AAC9D,SAAS,OAAO,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE;AAC7E,QAAQ,OAAO,MAAMA,YAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACpD,KAAK;AACL,IAAI,MAAM,GAAG,GAAG,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;AAClE,IAAI,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnE,IAAI,IAAI,OAAO,WAAW,CAAC,oBAAoB,KAAK,UAAU,EAAE;AAChE,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC5C,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,MAAM,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC1D,YAAY,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAE;AACzD,gBAAgB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;AAC/D,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,WAAW,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC3E,iBAAiB,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACnD,YAAY,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC3C,SAAS;AACT,QAAQ,OAAO,MAAM,KAAK,CAAC;AAC3B,KAAK;AACL,SAAS;AACT,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC5C,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC;AACtC,iBAAiB,IAAI,CAAC,KAAK,IAAI,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACvE,iBAAiB,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACnD,YAAY,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC3C,SAAS;AACT,QAAQ,OAAO,MAAM,KAAK,CAAC;AAC3B,KAAK;AACL;;;;"}