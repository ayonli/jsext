{"version":3,"file":"string.js","sources":["../string.ts"],"sourcesContent":["/**\n * Functions for dealing with strings.\n * @module\n */\nimport { chunk as _chunk } from \"./array/base.ts\";\nimport _bytes from \"./bytes.ts\";\nconst _chars = chars;\nconst EMOJI_RE = /^(?:\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F)(?:\\u200d(?:\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F))*$/u;\n/**\n * Compares two strings, returns `-1` if `a < b`, `0` if `a === b` and `1` if `a > b`.\n */\nexport function compare(str1, str2) {\n    if (str1 < str2) {\n        return -1;\n    }\n    else if (str1 > str2) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\n/**\n * Returns a random string restricted by `length` (character-wise).\n *\n * @param chars Default value: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`.\n */\nexport function random(length, chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n    const arr = _chars(chars);\n    let str = \"\";\n    while (0 < length--) {\n        const i = Math.floor(Math.random() * arr.length);\n        str += arr[i];\n    }\n    return str;\n}\n/** Counts the occurrence of the sub-string in the string. */\nexport function count(str, sub) {\n    if (!sub) {\n        return str.length + 1;\n    }\n    else if (!str) {\n        return 0;\n    }\n    return str.split(sub).length - 1;\n}\n/**\n * Capitalizes the string, if `all` is true, all words are capitalized, otherwise only\n * the first word will be capitalized.\n */\nexport function capitalize(str, all) {\n    const regex = all ? /\\w+/g : /\\w+/;\n    return str.replace(regex, (match) => {\n        return match[0].toUpperCase() + match.slice(1).toLowerCase();\n    });\n}\n/** Replaces the spaces between non-empty characters of the string with hyphens (`-`). */\nexport function hyphenate(str) {\n    return str.replace(/(\\S)\\s+(\\S)/g, (_, $1, $2) => $1 + \"-\" + $2);\n}\n/**\n * Returns the bytes of the given string.\n * @deprecated use the `bytes` module instead.\n */\nexport function bytes(str) {\n    return _bytes(str);\n}\n/** Returns the characters of the string (emojis are supported). */\nexport function chars(str) {\n    if (typeof (Intl === null || Intl === void 0 ? void 0 : Intl.Segmenter) === \"function\") {\n        return Array.from(new Intl.Segmenter().segment(str))\n            .map((x) => x.segment);\n    }\n    else {\n        return Array.from(str);\n    }\n}\n/** Extracts words (in latin characters) from the string. */\nexport function words(str) {\n    const matches = str.match(/\\w+/g);\n    return matches ? [...matches].map(sub => sub.split(\"_\")).flat() : [];\n}\n/** Splits the string into lines by `\\n` or `\\r\\n`. */\nexport function lines(str) {\n    return str.split(/\\r?\\n/);\n}\n/** Breaks the string into smaller chunks according to the given length. */\nexport function chunk(str, length) {\n    return _chunk(str, length);\n}\n/** Truncates the string to the given length (including the ending `...`). */\nexport function truncate(str, length) {\n    if (length <= 0) {\n        return \"\";\n    }\n    else if (length >= str.length) {\n        return str;\n    }\n    else {\n        length -= 3;\n        return str.slice(0, length) + \"...\";\n    }\n}\nconst _trim = String.prototype.trim;\nconst _trimEnd = String.prototype.trimEnd;\nconst _trimStart = String.prototype.trimStart;\n/** Removes leading and trailing spaces or custom characters of the string. */\nexport function trim(str, chars = \"\") {\n    if (!chars) {\n        return _trim.call(str);\n    }\n    else {\n        return trimEnd(trimStart(str, chars), chars);\n    }\n}\n/** Removes trailing spaces or custom characters of the string. */\nexport function trimEnd(str, chars = \"\") {\n    if (!chars) {\n        return _trimEnd.call(str);\n    }\n    else {\n        let i = str.length;\n        while (i-- && chars.indexOf(str[i]) !== -1) { }\n        return str.substring(0, i + 1);\n    }\n}\n/** Removes leading spaces or custom characters of the string. */\nexport function trimStart(str, chars = \"\") {\n    if (!chars) {\n        return _trimStart.call(str);\n    }\n    else {\n        let i = 0;\n        do { } while (chars.indexOf(str[i]) !== -1 && ++i);\n        return str.substring(i);\n    }\n}\n/** Removes the given suffix of the string if present. */\nexport function stripEnd(str, suffix) {\n    if (str.endsWith(suffix)) {\n        return str.slice(0, -suffix.length);\n    }\n    return str;\n}\n/** Removes the given prefix of the string if present. */\nexport function stripStart(str, prefix) {\n    if (str.startsWith(prefix)) {\n        return str.slice(prefix.length);\n    }\n    return str;\n}\n/** Returns the byte length of the string. */\nexport function byteLength(str) {\n    return _bytes(str).byteLength;\n}\n/** Checks if all characters in the string are within the ASCII range. */\nexport function isAscii(str, printableOnly = false) {\n    return printableOnly ? /^[-~]+$/.test(str) : /^[\\x00-\\x7E]+$/.test(str);\n}\n/** Checks if all characters in the string are emojis. */\nexport function isEmoji(str) {\n    return chars(str).every((char) => EMOJI_RE.test(char));\n}\n//# sourceMappingURL=string.js.map"],"names":["_bytes","_chunk"],"mappings":"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"}