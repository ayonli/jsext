{"version":3,"file":"bytes.js","sources":["../bytes.ts"],"sourcesContent":["/**\n * Functions for dealing with byte arrays (`Uint8Array`).\n * @module\n */\nimport { equals as _equals, includeSlice as _includesSlice, startsWith as _startsWith, endsWith as _endsWith, split as _split, chunk as _chunk, } from \"./array/base.ts\";\nimport { as } from \"./object.ts\";\nimport { sum } from \"./math.ts\";\nconst defaultEncoder = new TextEncoder();\nconst defaultDecoder = new TextDecoder();\nconst base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction base64(bytes) {\n    let result = \"\";\n    let i;\n    const l = bytes.length;\n    for (i = 2; i < l; i += 3) {\n        result += base64Chars[(bytes[i - 2]) >> 2];\n        result += base64Chars[(((bytes[i - 2]) & 0x03) << 4) |\n            ((bytes[i - 1]) >> 4)];\n        result += base64Chars[(((bytes[i - 1]) & 0x0f) << 2) |\n            ((bytes[i]) >> 6)];\n        result += base64Chars[(bytes[i]) & 0x3f];\n    }\n    if (i === l + 1) {\n        // 1 octet yet to write\n        result += base64Chars[(bytes[i - 2]) >> 2];\n        result += base64Chars[((bytes[i - 2]) & 0x03) << 4];\n        result += \"==\";\n    }\n    if (i === l) {\n        // 2 octets yet to write\n        result += base64Chars[(bytes[i - 2]) >> 2];\n        result += base64Chars[(((bytes[i - 2]) & 0x03) << 4) |\n            ((bytes[i - 1]) >> 4)];\n        result += base64Chars[((bytes[i - 1]) & 0x0f) << 2];\n        result += \"=\";\n    }\n    return result;\n}\n/**\n * A byte array is a `Uint8Array` that can be coerced to a string with `utf8`\n * encoding.\n */\nexport class ByteArray extends Uint8Array {\n    toString() {\n        return text(this);\n    }\n    toJSON() {\n        return {\n            type: \"ByteArray\",\n            data: Array.from(this),\n        };\n    }\n}\nexport default function bytes(data) {\n    if (typeof data === \"number\") {\n        return new ByteArray(data);\n    }\n    else if (typeof data === \"string\") {\n        return new ByteArray(defaultEncoder.encode(data).buffer);\n    }\n    else if (ArrayBuffer.isView(data)) {\n        return new ByteArray(data.buffer, data.byteOffset, data.byteLength);\n    }\n    else {\n        return new ByteArray(data);\n    }\n}\n/**\n * Converts the byte array (or `Uint8Array`) to a string.\n * @param encoding Default value: `utf8`.\n */\nexport function text(bytes, encoding = \"utf8\") {\n    var _a, _b;\n    if (encoding === \"hex\") {\n        if (typeof Buffer === \"function\") {\n            return ((_a = as(bytes, Buffer)) !== null && _a !== void 0 ? _a : Buffer.from(bytes)).toString(\"hex\");\n        }\n        else {\n            return bytes.reduce((str, byte) => {\n                return str + byte.toString(16).padStart(2, \"0\");\n            }, \"\");\n        }\n        ;\n    }\n    else if (encoding === \"base64\") {\n        if (typeof Buffer === \"function\") {\n            return ((_b = as(bytes, Buffer)) !== null && _b !== void 0 ? _b : Buffer.from(bytes)).toString(\"base64\");\n        }\n        else {\n            return base64(bytes);\n        }\n    }\n    else if (typeof Buffer === \"function\" && bytes instanceof Buffer) {\n        return bytes.toString(\"utf8\");\n    }\n    else {\n        return defaultDecoder.decode(bytes);\n    }\n}\n/** Copies bytes from `src` array to `dest` and returns the number of bytes copied. */\nexport function copy(src, dest) {\n    if (src.length > dest.length) {\n        src = src.subarray(0, dest.length);\n    }\n    dest.set(src);\n    return src.length;\n}\n/** Like `Buffer.concat` but for pure `Uint8Array`. */\nexport function concat(...arrays) {\n    var _a;\n    const length = sum(...arrays.map(arr => arr.length));\n    const ctor = (((_a = arrays[0]) === null || _a === void 0 ? void 0 : _a.constructor) || Uint8Array);\n    const result = typeof Buffer === \"function\" && Object.is(ctor, Buffer)\n        ? Buffer.alloc(length)\n        : new ctor(length);\n    let offset = 0;\n    for (const arr of arrays) {\n        result.set(arr, offset);\n        offset += arr.length;\n    }\n    return result;\n}\n/** Like `Buffer.compare` but for pure `Uint8Array`. */\nexport function compare(arr1, arr2) {\n    if (arr1 === arr2) {\n        return 0;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        const ele1 = arr1[i];\n        const ele2 = arr2[i];\n        if (ele2 === undefined) {\n            return 1;\n        }\n        else if (ele1 < ele2) {\n            return -1;\n        }\n        else if (ele1 > ele2) {\n            return 1;\n        }\n    }\n    return arr1.length < arr2.length ? -1 : 0;\n}\n/** Checks if the two byte arrays are equal to each other. */\nexport function equals(arr1, arr2) {\n    if (arr1.length < 1000) {\n        return _equals(arr1, arr2);\n    }\n    else if (arr1 === arr2) {\n        return true;\n    }\n    else if (arr1.length !== arr2.length) {\n        return false;\n    }\n    const len = arr1.length;\n    const compressible = Math.floor(len / 4);\n    const _arr1 = new Uint32Array(arr1.buffer, 0, compressible);\n    const _arr2 = new Uint32Array(arr2.buffer, 0, compressible);\n    for (let i = compressible * 4; i < len; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < _arr1.length; i++) {\n        if (_arr1[i] !== _arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/** Checks if the byte array contains another array as a slice of its contents. */\nexport function includesSlice(arr, slice) {\n    return _includesSlice(arr, slice);\n}\n/** Checks if the byte array starts with the given prefix. */\nexport function startsWith(arr, prefix) {\n    return _startsWith(arr, prefix);\n}\n/** Checks if the byte array ends with the given suffix. */\nexport function endsWith(arr, suffix) {\n    return _endsWith(arr, suffix);\n}\n/** Breaks the byte array into smaller chunks according to the given delimiter. */\nexport function split(arr, delimiter) {\n    return _split(arr, delimiter);\n}\n/** Breaks the byte array into smaller chunks according to the given length. */\nexport function chunk(arr, length) {\n    return _chunk(arr, length);\n}\n//# sourceMappingURL=bytes.js.map"],"names":["_equals","_includesSlice","_startsWith","_endsWith","_split","_chunk"],"mappings":"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"}