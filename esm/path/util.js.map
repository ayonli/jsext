{"version":3,"file":"util.js","sources":["../../path/util.ts"],"sourcesContent":["import { trim, trimEnd } from \"../string/index.ts\";\nexport function isNotQuery(str) {\n    return str[0] !== \"?\" && str[0] !== \"#\";\n}\nexport function isVolume(path, strict = false) {\n    return strict ? /^[a-z]:$/i.test(path) : /^[a-z]:(\\\\)?$/i.test(path);\n}\n/**\n * Checks if the given `path` is a Windows specific path.\n * @experimental\n */\nexport function isWindowsPath(path) {\n    return /^[a-z]:/i.test(path) && path.slice(1, 4) !== \"://\";\n}\n/**\n * Checks if the given `path` is a Posix specific path.\n * @experimental\n */\nexport function isPosixPath(path) {\n    return /^\\//.test(path);\n}\n/**\n * Checks if the given string is a URL, whether standard or non-standard.\n * @experimental\n */\nexport function isUrl(str) {\n    return /^[a-z](([a-z\\-]+)?:\\/\\/\\S+|[a-z\\-]+:\\/\\/$)/i.test(str) || isFileUrl(str);\n}\n/**\n * Checks if the given string is a file URL, whether with or without `//`.\n * @experimental\n */\nexport function isFileUrl(str) {\n    return /^file:((\\/\\/|\\/)\\S+|\\/?$)/i.test(str);\n}\nexport function isFileProtocol(path) {\n    return /^file:(\\/\\/)?$/i.test(path);\n}\n/**\n * Checks if the given `path` is an absolute path.\n * @experimental\n */\nexport function isAbsolute(path) {\n    return isPosixPath(path) || isWindowsPath(path) || isUrl(path);\n}\n/**\n * Checks if the `path` ends with the given `sub` path. This function ignores\n * the query string and the hash string, and is separator insensitive.\n * @experimental\n */\nexport function endsWith(path, sub) {\n    const paths = split(path).filter(isNotQuery);\n    const subs = split(sub).filter(isNotQuery);\n    if (paths.length < subs.length) {\n        return false;\n    }\n    else if (!subs.length) {\n        return true;\n    }\n    if (isVolume(paths[0])) {\n        paths[0] = paths[0].toLowerCase();\n    }\n    if (isVolume(subs[0])) {\n        subs[0] = subs[0].toLowerCase();\n    }\n    paths.reverse();\n    subs.reverse();\n    for (let i = 0; i < subs.length; i++) {\n        if (subs[i] !== paths[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Splits the `path` into well-formed segments.\n * @experimental\n */\nexport function split(path) {\n    if (!path) {\n        return [];\n    }\n    else if (isUrl(path)) {\n        const { protocol, host, pathname, search, hash } = new URL(path);\n        const origin = protocol + \"//\" + host;\n        if (pathname === \"/\") {\n            if (search && hash) {\n                return [origin, search, hash];\n            }\n            else if (search) {\n                return [origin, search];\n            }\n            else if (hash) {\n                return [origin, hash];\n            }\n            else {\n                return [origin];\n            }\n        }\n        else {\n            const segments = trim(pathname, \"/\").split(/[/\\\\]+/);\n            if (search && hash) {\n                return [origin, ...segments, search, hash];\n            }\n            else if (search) {\n                return [origin, ...segments, search];\n            }\n            else if (hash) {\n                return [origin, ...segments, hash];\n            }\n            else {\n                return [origin, ...segments];\n            }\n        }\n    }\n    else if (isWindowsPath(path)) {\n        const [_, volume, ...segments] = split(\"file:///\" + path.replace(/[/\\\\]+/g, \"/\"));\n        return [volume + \"\\\\\", ...segments];\n    }\n    else if (isPosixPath(path)) {\n        const [_, ...segments] = split(\"file://\" + path.replace(/[/\\\\]+/g, \"/\"));\n        return [\"/\", ...segments];\n    }\n    else { // relative path\n        path = path.replace(/[/\\\\]+/g, \"/\");\n        const [_path, query] = path.split(\"?\");\n        if (query) {\n            const segments = _path ? trimEnd(_path, \"/\").split(\"/\") : [];\n            const [search, hash] = query.split(\"#\");\n            if (hash) {\n                return [...segments, \"?\" + search, \"#\" + hash];\n            }\n            else {\n                return [...segments, \"?\" + search];\n            }\n        }\n        else {\n            const [pathname, hash] = path.split(\"#\");\n            const segments = pathname ? trimEnd(pathname, \"/\").split(\"/\") : [];\n            if (hash) {\n                return [...segments, \"#\" + hash];\n            }\n            else {\n                return segments;\n            }\n        }\n    }\n}\n//# sourceMappingURL=util.js.map"],"names":[],"mappings":"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"}