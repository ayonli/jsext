{"version":3,"file":"untar.js","sources":["../../archive/untar.ts"],"sourcesContent":["import { concat as concatBytes } from \"../bytes.ts\";\nimport { createReadableStream, createWritableStream, ensureDir } from \"../fs.ts\";\nimport { dirname, join, resolve } from \"../path.ts\";\nimport Tarball, { HEADER_LENGTH, createEntry, parseHeader } from \"./Tarball.ts\";\nexport default async function untar(src, dest = {}, options = {}) {\n    src = typeof src === \"string\" ? resolve(src) : src;\n    let _dest = undefined;\n    if (typeof dest === \"string\") {\n        _dest = resolve(dest);\n    }\n    else if (typeof dest === \"object\") {\n        if (typeof FileSystemDirectoryHandle === \"function\" &&\n            dest instanceof FileSystemDirectoryHandle) {\n            _dest = dest;\n        }\n        else {\n            options = dest;\n        }\n    }\n    let input = src instanceof ReadableStream ? src : createReadableStream(src, options);\n    if (options.gzip) {\n        const gzip = new DecompressionStream(\"gzip\");\n        input = input.pipeThrough(gzip);\n    }\n    const { signal } = options;\n    signal === null || signal === void 0 ? void 0 : signal.addEventListener(\"abort\", () => {\n        input.cancel(signal.reason);\n    });\n    if (!_dest) {\n        return await Tarball.load(input);\n    }\n    const reader = input.getReader();\n    let lastChunk = new Uint8Array(0);\n    let headerInfo = null;\n    let writer;\n    let writtenBytes = 0;\n    let paddingSize = 0;\n    try {\n        outer: while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            lastChunk = lastChunk.byteLength ? concatBytes(lastChunk, value) : value;\n            if (paddingSize > 0 && lastChunk.byteLength >= paddingSize) {\n                lastChunk = lastChunk.subarray(paddingSize);\n                paddingSize = 0;\n            }\n            while (true) {\n                if (!headerInfo) {\n                    if (lastChunk.byteLength >= HEADER_LENGTH) {\n                        const _header = parseHeader(lastChunk);\n                        if (_header) {\n                            [headerInfo, lastChunk] = _header;\n                        }\n                        else {\n                            lastChunk = new Uint8Array(0);\n                            break outer;\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n                const info = createEntry(headerInfo);\n                const fileSize = info.size;\n                if (writer) {\n                    const chunk = lastChunk.subarray(0, fileSize - writtenBytes);\n                    await writer.write(chunk);\n                    lastChunk = lastChunk.subarray(fileSize - writtenBytes);\n                    writtenBytes += chunk.byteLength;\n                }\n                else if (info.kind === \"directory\") {\n                    if (typeof FileSystemDirectoryHandle === \"function\" &&\n                        _dest instanceof FileSystemDirectoryHandle) {\n                        await ensureDir(info.relativePath, {\n                            ...options,\n                            root: _dest,\n                            mode: info.mode,\n                        });\n                    }\n                    else {\n                        await ensureDir(join(_dest, info.relativePath), {\n                            ...options,\n                            mode: info.mode,\n                        });\n                    }\n                }\n                else {\n                    let filename;\n                    let _options = options;\n                    if (typeof FileSystemDirectoryHandle === \"function\" &&\n                        _dest instanceof FileSystemDirectoryHandle) {\n                        _options = { ...options, root: _dest };\n                        filename = info.relativePath;\n                    }\n                    else {\n                        filename = join(_dest, info.relativePath);\n                    }\n                    await ensureDir(dirname(filename), _options);\n                    const output = createWritableStream(filename, _options);\n                    writer = output.getWriter();\n                    continue;\n                }\n                if (writtenBytes === fileSize) {\n                    paddingSize = HEADER_LENGTH - (fileSize % HEADER_LENGTH || HEADER_LENGTH);\n                    if (paddingSize && lastChunk.byteLength >= paddingSize) {\n                        lastChunk = lastChunk.subarray(paddingSize);\n                        paddingSize = 0;\n                    }\n                    writtenBytes = 0;\n                    headerInfo = null;\n                    writer === null || writer === void 0 ? void 0 : writer.close();\n                    writer = undefined;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        if (lastChunk.byteLength) {\n            throw new Error(\"The archive is corrupted\");\n        }\n    }\n    finally {\n        reader.releaseLock();\n    }\n}\n//# sourceMappingURL=untar.js.map"],"names":["concatBytes"],"mappings":"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"}