{"version":3,"file":"net.js","sources":["../../workerd/net.ts"],"sourcesContent":["import { connect as _connect } from \"cloudflare:sockets\";\nimport { Socket } from \"../net/types.ts\";\nimport { constructNetAddress } from \"../net/util.ts\";\nexport * from \"../net/types.ts\";\nexport async function connect(options) {\n    var _a;\n    const createSocket = async (impl, startTls) => {\n        const info = await impl.opened;\n        const localAddr = info.localAddress\n            ? new URL(\"http://\" + info.localAddress)\n            : null;\n        const remoteAddr = info.remoteAddress\n            ? new URL(\"http://\" + info.remoteAddress)\n            : null;\n        return new Socket({\n            localAddress: localAddr ? constructNetAddress({\n                family: localAddr.hostname.includes(\":\") ? \"IPv6\" : \"IPv4\",\n                hostname: localAddr.hostname,\n                port: localAddr.port ? Number(localAddr.port) : 0,\n            }) : null,\n            remoteAddress: remoteAddr ? constructNetAddress({\n                family: remoteAddr.hostname.includes(\":\") ? \"IPv6\" : \"IPv4\",\n                hostname: remoteAddr.hostname,\n                port: remoteAddr.port ? Number(remoteAddr.port) : 0,\n            }) : null,\n            readable: impl.readable,\n            writable: impl.writable,\n            closed: impl.closed,\n            close: impl.close.bind(impl),\n            startTls,\n            ref: () => void 0,\n            unref: () => void 0,\n        });\n    };\n    const _socket = _connect({\n        ...options,\n        hostname: (_a = options.hostname) !== null && _a !== void 0 ? _a : \"localhost\",\n    }, {\n        secureTransport: \"starttls\",\n        allowHalfOpen: false,\n    });\n    return await createSocket(_socket, async () => {\n        const __socket = _socket.startTls();\n        return await createSocket(__socket, async () => {\n            throw new Error(\"TLS already started\");\n        });\n    });\n}\n//# sourceMappingURL=net.js.map"],"names":["_connect"],"mappings":";;;;AAIO,eAAe,OAAO,CAAC,OAAO,EAAE;AACvC,IAAI,IAAI,EAAE,CAAC;AACX,IAAI,MAAM,YAAY,GAAG,OAAO,IAAI,EAAE,QAAQ,KAAK;AACnD,QAAQ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC;AACvC,QAAQ,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY;AAC3C,cAAc,IAAI,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;AACpD,cAAc,IAAI,CAAC;AACnB,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa;AAC7C,cAAc,IAAI,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;AACrD,cAAc,IAAI,CAAC;AACnB,QAAQ,OAAO,IAAI,MAAM,CAAC;AAC1B,YAAY,YAAY,EAAE,SAAS,GAAG,mBAAmB,CAAC;AAC1D,gBAAgB,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;AAC1E,gBAAgB,QAAQ,EAAE,SAAS,CAAC,QAAQ;AAC5C,gBAAgB,IAAI,EAAE,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;AACjE,aAAa,CAAC,GAAG,IAAI;AACrB,YAAY,aAAa,EAAE,UAAU,GAAG,mBAAmB,CAAC;AAC5D,gBAAgB,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;AAC3E,gBAAgB,QAAQ,EAAE,UAAU,CAAC,QAAQ;AAC7C,gBAAgB,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;AACnE,aAAa,CAAC,GAAG,IAAI;AACrB,YAAY,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACnC,YAAY,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACnC,YAAY,MAAM,EAAE,IAAI,CAAC,MAAM;AAC/B,YAAY,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AACxC,YAAY,QAAQ;AACpB,YAAY,GAAG,EAAE,MAAM,KAAK,CAAC;AAC7B,YAAY,KAAK,EAAE,MAAM,KAAK,CAAC;AAC/B,SAAS,CAAC,CAAC;AACX,KAAK,CAAC;AACN,IAAI,MAAM,OAAO,GAAGA,SAAQ,CAAC;AAC7B,QAAQ,GAAG,OAAO;AAClB,QAAQ,QAAQ,EAAE,CAAC,EAAE,GAAG,OAAO,CAAC,QAAQ,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,WAAW;AACtF,KAAK,EAAE;AACP,QAAQ,eAAe,EAAE,UAAU;AACnC,QAAQ,aAAa,EAAE,KAAK;AAC5B,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,MAAM,YAAY,CAAC,OAAO,EAAE,YAAY;AACnD,QAAQ,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC5C,QAAQ,OAAO,MAAM,YAAY,CAAC,QAAQ,EAAE,YAAY;AACxD,YAAY,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AACnD,SAAS,CAAC,CAAC;AACX,KAAK,CAAC,CAAC;AACP;;;;"}