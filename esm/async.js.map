{"version":3,"file":"async.js","sources":["../async.ts"],"sourcesContent":["/**\n * Functions for async/promise context handling.\n * @module\n */\nimport { unrefTimer } from \"./runtime.ts\";\n/** Try to resolve a promise with a timeout limit. */\nexport async function timeout(value, ms) {\n    const result = await Promise.race([\n        value,\n        new Promise((_, reject) => unrefTimer(setTimeout(() => {\n            reject(new Error(`operation timeout after ${ms}ms`));\n        }, ms)))\n    ]);\n    return result;\n}\n/** Resolves a promise only after the given duration. */\nexport async function after(value, ms) {\n    const [result] = await Promise.allSettled([\n        value,\n        new Promise(resolve => setTimeout(resolve, ms))\n    ]);\n    if (result.status === \"fulfilled\") {\n        return result.value;\n    }\n    else {\n        throw result.reason;\n    }\n}\n/** Blocks the context for a given duration. */\nexport async function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Blocks the context until the test returns a truthy value, which is not `false`,\n * `null` or `undefined`. If the test throws an error, it will be treated as a\n * falsy value and the loop continues.\n *\n * This functions returns the same result as the test function when passed.\n */\nexport async function until(test) {\n    return new Promise((resolve) => {\n        let ongoing = false;\n        const timer = setInterval(async () => {\n            if (ongoing)\n                return;\n            try {\n                ongoing = true;\n                const result = await test();\n                if (result !== false && result !== null && result !== undefined) {\n                    clearInterval(timer);\n                    resolve(result);\n                }\n            }\n            catch (_a) {\n                // ignore\n            }\n            finally {\n                ongoing = false;\n            }\n        }, 1);\n    });\n}\n/**\n * Runs multiple tasks concurrently and returns the result of the first task that\n * completes. The rest of the tasks will be aborted.\n *\n * @example\n * ```ts\n * import { select } from \"@ayonli/jsext/async\";\n *\n * const result = await select([\n *     signal => fetch(\"https://example.com\", { signal }),\n *     signal => fetch(\"https://example.org\", { signal }),\n * ]);\n *\n * console.log(result);\n * ```\n */\nexport async function select(tasks) {\n    const ctrl = new AbortController();\n    const { signal } = ctrl;\n    const result = await Promise.race(tasks.map(fn => fn(signal)));\n    ctrl.abort();\n    return result;\n}\n/**\n * Creates a promise that can be resolved or rejected manually.\n *\n * This function is like `Promise.withResolvers` but less verbose.\n */\nexport function asyncTask() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    return Object.assign(promise, {\n        resolve: resolve,\n        reject: reject\n    });\n}\n//# sourceMappingURL=async.js.map"],"names":[],"mappings":"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"}