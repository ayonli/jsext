{"version":3,"file":"lock.js","sources":["../lock.ts"],"sourcesContent":["import BiMap from \"./collections/BiMap.ts\";\nif (typeof Symbol.dispose === \"undefined\") {\n    Object.defineProperty(Symbol, \"dispose\", { value: Symbol(\"Symbol.dispose\") });\n}\nconst _value = Symbol.for(\"value\");\n/**\n * AsyncMutex is a mutual exclusion (mutex) implementation for async JavaScript,\n * which prevents multiple coroutines from accessing the same shared resource\n * simultaneously.\n *\n * @example\n * ```ts\n * import { AsyncMutex } from \"@ayonli/jsext/lock\";\n * import { random } from \"@ayonli/jsext/number\";\n * import { sleep } from \"@ayonli/jsext/promise\";\n *\n * const mutex = new AsyncMutex(1);\n *\n * async function concurrentOperation() {\n *     const ctx = await mutex.lock();\n *     const value1 = ctx.value;\n *\n *     await otherAsyncOperations();\n *\n *     ctx.value += 1\n *     const value2 = ctx.value;\n *\n *     console.assert(value1 + 1 === value2);\n *\n *     ctx.release();\n * }\n *\n * async function otherAsyncOperations() {\n *     await sleep(100 * random(1, 10));\n * }\n *\n * await Promise.all([\n *     concurrentOperation(),\n *     concurrentOperation(),\n *     concurrentOperation(),\n *     concurrentOperation(),\n * ]);\n * ```\n */\nexport class AsyncMutex {\n    /**\n     * @param value The data associated to the mutex instance.\n     */\n    constructor(value) {\n        this.queue = [];\n        this[_value] = value;\n    }\n    /** Acquires the lock of the mutex, optionally for modifying the shared resource.  */\n    async lock() {\n        await new Promise(resolve => {\n            if (this.queue.length) {\n                this.queue.push(resolve);\n            }\n            else {\n                this.queue.push(resolve);\n                resolve();\n            }\n        });\n        const lock = Object.create(AsyncMutex.Lock.prototype);\n        lock[\"mutex\"] = this;\n        return lock;\n    }\n}\n(function (AsyncMutex) {\n    class Lock {\n        constructor(mutex) {\n            this.mutex = mutex;\n        }\n        /** Accesses the data associated to the mutex instance. */\n        get value() {\n            return this.mutex[_value];\n        }\n        set value(v) {\n            this.mutex[_value] = v;\n        }\n        /** Releases the current lock of the mutex. */\n        async release() {\n            const queue = this.mutex[\"queue\"];\n            queue.shift();\n            const next = queue[0];\n            if (next) {\n                next();\n            }\n            else if (registry.hasValue(this.mutex)) {\n                registry.deleteValue(this.mutex);\n            }\n        }\n        [Symbol.dispose]() {\n            this.release();\n        }\n    }\n    AsyncMutex.Lock = Lock;\n})(AsyncMutex || (AsyncMutex = {}));\nconst registry = new BiMap();\n/**\n * Acquires lock for the given key in order to perform concurrent operations and prevent conflicts.\n *\n * If the key is currently being locked by other coroutines, this function will block until the\n * lock becomes available again.\n *\n * @example\n * ```ts\n * import lock from \"@ayonli/jsext/lock\";\n *\n * const key = \"lock_key\";\n *\n * async function someAsyncOperation() {\n *     const ctx = await lock(key);\n *\n *     // This block will never be run if there are other coroutines holding\n *     // the lock.\n *     //\n *     // Other coroutines trying to lock the same key will also never be run\n *     // before `release()`.\n *\n *     ctx.release();\n * }\n * ```\n */\nexport default async function lock(key) {\n    let mutex = registry.get(key);\n    if (!mutex) {\n        registry.set(key, mutex = new AsyncMutex(void 0));\n    }\n    return await mutex.lock();\n}\n//# sourceMappingURL=lock.js.map"],"names":[],"mappings":"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"}