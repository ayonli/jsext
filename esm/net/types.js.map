{"version":3,"file":"types.js","sources":["../../net/types.ts"],"sourcesContent":["const _impl = Symbol.for(\"impl\");\n/**\n * A socket represents a network connection, currently only supports TCP.\n */\nexport class Socket {\n    constructor(impl) {\n        this[_impl] = impl;\n    }\n    get localAddress() {\n        var _a;\n        return (_a = this[_impl].localAddress) !== null && _a !== void 0 ? _a : null;\n    }\n    get remoteAddress() {\n        var _a;\n        return (_a = this[_impl].remoteAddress) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * The readable side of the socket.\n     */\n    get readable() {\n        return this[_impl].readable;\n    }\n    /**\n     * The writable side of the socket.\n     */\n    get writable() {\n        return this[_impl].writable;\n    }\n    /**\n     * A promise that resolves when the socket is closed, or rejects if the socket\n     * is closed with an error.\n     */\n    get closed() {\n        return this[_impl].closed;\n    }\n    /**\n     * Closes both the readable and writable sides of the socket.\n     */\n    close() {\n        return this[_impl].close();\n    }\n    /**\n     * Opposite of `unref()`, calling `ref()` on a previously unrefed socket will\n     * not let the program exit if it's the only socket left (the default behavior).\n     * If the socket is refed calling `ref()` again will have no effect.\n     */\n    ref() {\n        return this[_impl].ref();\n    }\n    /**\n     * Calling `unref()` on a socket will allow the program to exit if this is\n     * the only active socket in the event system. If the socket is already\n     * unrefed calling `unref()` again will have no effect.\n     */\n    unref() {\n        return this[_impl].unref();\n    }\n}\n//# sourceMappingURL=types.js.map"],"names":[],"mappings":"AAAA,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACjC;AACA;AACA;AACO,MAAM,MAAM,CAAC;AACpB,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;AAC3B,KAAK;AACL,IAAI,IAAI,YAAY,GAAG;AACvB,QAAQ,IAAI,EAAE,CAAC;AACf,QAAQ,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AACrF,KAAK;AACL,IAAI,IAAI,aAAa,GAAG;AACxB,QAAQ,IAAI,EAAE,CAAC;AACf,QAAQ,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AACtF,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;AACpC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;AACpC,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,IAAI,MAAM,GAAG;AACjB,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;AAClC,KAAK;AACL;AACA;AACA;AACA,IAAI,KAAK,GAAG;AACZ,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,GAAG,GAAG;AACV,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,KAAK,GAAG;AACZ,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;AACnC,KAAK;AACL;;;;"}