{"version":3,"file":"types.js","sources":["../../net/types.ts"],"sourcesContent":[";\nconst _impl = Symbol.for(\"impl\");\n/**\n * A socket represents an open transport to a remote peer.\n */\nexport class Socket {\n    constructor(impl) {\n        this[_impl] = impl;\n    }\n    /**\n     * A promise that resolves when the socket is closed cleanly, or rejects if\n     * the closed with an error.\n     */\n    get closed() {\n        return this[_impl].closed;\n    }\n    /**\n     * Closes the socket immediately, if there are any queued data, they will be\n     * discarded.\n     */\n    close() {\n        return this[_impl].close();\n    }\n    /**\n     * Opposite of `unref()`, calling `ref()` on a previously unrefed socket will\n     * not let the program exit if it's the only socket left (the default behavior).\n     * If the socket is refed calling `ref()` again will have no effect.\n     *\n     * NOTE: This function only works in Node.js, Deno and Bun, it is a no-op in\n     * other environments.\n     */\n    ref() {\n        return this[_impl].ref();\n    }\n    /**\n     * Calling `unref()` on a socket will allow the program to exit if this is\n     * the only active socket in the event system. If the socket is already\n     * unrefed calling `unref()` again will have no effect.\n     *\n     * NOTE: This function only works in Node.js, Deno and Bun, it is a no-op in\n     * other environments.\n     */\n    unref() {\n        return this[_impl].unref();\n    }\n}\n/**\n * A socket stream represents a connection to a remote peer with a `readable`\n * stream and a `writable` stream.\n */\nexport class SocketStream extends Socket {\n    constructor(impl) {\n        super(impl);\n        this[_impl] = impl;\n    }\n    /**\n     * The readable side of the socket.\n     */\n    get readable() {\n        return this[_impl].readable;\n    }\n    /**\n     * The writable side of the socket.\n     */\n    get writable() {\n        return this[_impl].writable;\n    }\n}\nexport class TcpSocketStream extends SocketStream {\n    constructor(impl) {\n        super(impl);\n        this[_impl] = impl;\n    }\n    get localAddress() {\n        return this[_impl].localAddress;\n    }\n    get remoteAddress() {\n        return this[_impl].remoteAddress;\n    }\n    /**\n     * Enable/disable keep-alive functionality.\n     *\n     * NOTE: This function is a no-op in Cloudflare Workers and Deno with TLS enabled.\n     */\n    setKeepAlive(keepAlive = undefined) {\n        return this[_impl].setKeepAlive(keepAlive);\n    }\n    /**\n     * Enable/disable the use of Nagle's algorithm.\n     *\n     * NOTE: This function is a no-op in Cloudflare Workers and Deno with TLS enabled.\n     */\n    setNoDelay(noDelay = undefined) {\n        return this[_impl].setNoDelay(noDelay);\n    }\n}\nexport class UnixSocketStream extends SocketStream {\n}\nexport class UdpSocket extends Socket {\n    constructor(impl) {\n        super(impl);\n        this[_impl] = impl;\n    }\n    get localAddress() {\n        return this[_impl].localAddress;\n    }\n    /**\n     * Receives a message from the socket, returns the data and the sender\n     * address in a tuple.\n     */\n    receive() {\n        return this[_impl].receive();\n    }\n    /**\n     * Sends a message to the specified receiver, returns the number of bytes\n     * sent.\n     *\n     * NOTE: UDP messages have size limits, see\n     * https://nodejs.org/docs/latest/api/dgram.html#note-about-udp-datagram-size.\n     *\n     */\n    send(data, receiver) {\n        return this[_impl].send(data, receiver);\n    }\n    /**\n     * Connects the socket to a remote peer so that future communications will\n     * only be with that peer.\n     *\n     * This function returns a `UdpSocketStream` instance that comes with a\n     * `readable` stream and a `writable` stream, which gives a more convenient\n     * interface that is similar to TCP connections.\n     *\n     * Once connected, the `send` and `receive` methods of the original socket\n     * will be disabled.\n     */\n    connect(to) {\n        return this[_impl].connect(to);\n    }\n    /**\n     * Tells the kernel to join a multicast group at the given `address` and\n     * the optional `multicastInterface` using the `IP_ADD_MEMBERSHIP` socket\n     * option.\n     */\n    joinMulticast(address, interfaceAddress = undefined) {\n        return this[_impl].joinMulticast(address, interfaceAddress);\n    }\n    /**\n     * Instructs the kernel to leave a multicast group at `address` using the\n     * `IP_DROP_MEMBERSHIP` socket option.\n     */\n    leaveMulticast(address, interfaceAddress = undefined) {\n        return this[_impl].leaveMulticast(address, interfaceAddress);\n    }\n    /**\n     * Sets or clears the `SO_BROADCAST` socket option. When enabled, this\n     * socket is allowed to send packets to a broadcast address.\n     */\n    setBroadcast(flag) {\n        return this[_impl].setBroadcast(flag);\n    }\n    /**\n     * Sets or clears the `IP_MULTICAST_LOOP` socket option. When enabled, this\n     * socket will receive packets that it sends to the multicast group.\n     */\n    setMulticastLoopback(flag) {\n        return this[_impl].setMulticastLoopback(flag);\n    }\n    /**\n     * Sets the `IP_MULTICAST_TTL` socket option.\n     *\n     * See https://nodejs.org/docs/latest/api/dgram.html#socketsetmulticastttlttl\n     */\n    setMulticastTTL(ttl) {\n        return this[_impl].setMulticastTTL(ttl);\n    }\n    /**\n     * Sets the `IP_TTL` socket option\n     *\n     * See https://nodejs.org/docs/latest/api/dgram.html#socketsetttlttl\n     */\n    setTTL(ttl) {\n        return this[_impl].setTTL(ttl);\n    }\n}\nexport class UdpSocketStream extends Socket {\n    constructor(impl) {\n        super(impl);\n        this[_impl] = impl;\n    }\n    get localAddress() {\n        return this[_impl].localAddress;\n    }\n    get remoteAddress() {\n        return this[_impl].remoteAddress;\n    }\n    get readable() {\n        return this[_impl].readable;\n    }\n    get writable() {\n        return this[_impl].writable;\n    }\n}\n//# sourceMappingURL=types.js.map"],"names":[],"mappings":"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"}