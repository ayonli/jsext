{"version":3,"file":"server.js","sources":["../../http/server.ts"],"sourcesContent":["const _impl = Symbol.for(\"impl\");\n/**\n * A unified server interface for HTTP servers.\n */\nexport class Server {\n    constructor(options, impl) {\n        this.hostname = options.hostname;\n        this.port = options.port;\n        this[_impl] = impl;\n    }\n    /**\n     * Closes the server and stops it from accepting new connections.\n     * @param force Terminate all active connections immediately.\n     */\n    async close(force = false) {\n        const server = this[_impl];\n        if (typeof server.stop === \"function\") {\n            server.stop(force);\n        }\n        else if (typeof server.shutdown === \"function\") {\n            const _server = server;\n            _server.shutdown();\n            await _server.finished;\n        }\n        else if (typeof server.close === \"function\") {\n            const _server = server;\n            await new Promise((resolve, reject) => {\n                if (force && typeof _server.closeAllConnections === \"function\") {\n                    _server.closeAllConnections();\n                }\n                _server.close((err) => err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n     * Opposite of `unref()`, calling `ref()` on a previously `unref`ed server\n     * will _not_ let the program exit if it's the only server left (the default\n     * behavior). If the server is `ref`ed calling `ref()` again will have no\n     * effect.\n     */\n    ref() {\n        var _a, _b;\n        (_b = (_a = this[_impl]).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Calling `unref()` on a server will allow the program to exit if this is\n     * the only active server in the event system. If the server is already\n     * `unref`ed calling`unref()` again will have no effect.\n     */\n    unref() {\n        var _a, _b;\n        (_b = (_a = this[_impl]).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n}\n//# sourceMappingURL=server.js.map"],"names":[],"mappings":"AAAA,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACjC;AACA;AACA;AACO,MAAM,MAAM,CAAC;AACpB,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;AAC/B,QAAQ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACzC,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACjC,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;AAC3B,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,MAAM,KAAK,CAAC,KAAK,GAAG,KAAK,EAAE;AAC/B,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;AACnC,QAAQ,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AAC/C,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,SAAS;AACT,aAAa,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,UAAU,EAAE;AACxD,YAAY,MAAM,OAAO,GAAG,MAAM,CAAC;AACnC,YAAY,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC/B,YAAY,MAAM,OAAO,CAAC,QAAQ,CAAC;AACnC,SAAS;AACT,aAAa,IAAI,OAAO,MAAM,CAAC,KAAK,KAAK,UAAU,EAAE;AACrD,YAAY,MAAM,OAAO,GAAG,MAAM,CAAC;AACnC,YAAY,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AACnD,gBAAgB,IAAI,KAAK,IAAI,OAAO,OAAO,CAAC,mBAAmB,KAAK,UAAU,EAAE;AAChF,oBAAoB,OAAO,CAAC,mBAAmB,EAAE,CAAC;AAClD,iBAAiB;AACjB,gBAAgB,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE,CAAC,CAAC;AACtE,aAAa,CAAC,CAAC;AACf,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAG,GAAG;AACV,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC;AACnB,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,KAAK,GAAG;AACZ,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC;AACnB,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzF,KAAK;AACL;;;;"}