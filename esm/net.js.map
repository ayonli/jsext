{"version":3,"file":"net.js","sources":["../net.ts"],"sourcesContent":["import { asyncTask } from \"./async.ts\";\nimport { isBun, isDeno, isNode } from \"./env.ts\";\nimport { Socket } from \"./net/types.ts\";\nimport { constructNetAddress } from \"./net/util.ts\";\nexport * from \"./net/types.ts\";\n/**\n * Returns a random port number that is available for listening.\n *\n * NOTE: This function is not available in the browser and worker runtimes such\n * as Cloudflare Workers.\n *\n * @param prefer The preferred port number to return if it is available,\n * otherwise a random port is returned.\n *\n * @param hostname The hostname to bind the port to. Default is \"0.0.0.0\", only\n * used when `prefer` is set and not `0`.\n */\nexport async function randomPort(prefer = undefined, hostname = undefined) {\n    hostname || (hostname = \"0.0.0.0\");\n    if (isDeno) {\n        try {\n            const listener = Deno.listen({\n                hostname,\n                port: prefer !== null && prefer !== void 0 ? prefer : 0,\n            });\n            const { port } = listener.addr;\n            listener.close();\n            return Promise.resolve(port);\n        }\n        catch (err) {\n            if (prefer) {\n                return randomPort(0);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    else if (isBun) {\n        try {\n            const listener = Bun.listen({\n                hostname,\n                port: prefer !== null && prefer !== void 0 ? prefer : 0,\n                socket: {\n                    data: () => { },\n                },\n            });\n            const { port } = listener;\n            listener.stop(true);\n            return Promise.resolve(port);\n        }\n        catch (err) {\n            if (prefer) {\n                return randomPort(0);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    else if (isNode) {\n        const { createServer, connect } = await import(\"node:net\");\n        if (prefer) {\n            // In Node.js listening on a port used by another process may work,\n            // so we don't use `listen` method to check if the port is available.\n            // Instead, we use the `connect` method to check if the port can be\n            // reached, if so, the port is open and we don't use it.\n            const isOpen = await new Promise((resolve, reject) => {\n                const conn = connect(prefer, hostname === \"0.0.0.0\" ? \"localhost\" : hostname);\n                conn.once(\"connect\", () => {\n                    conn.end();\n                    resolve(true);\n                }).once(\"error\", (err) => {\n                    if (err[\"code\"] === \"ECONNREFUSED\") {\n                        resolve(false);\n                    }\n                    else {\n                        reject(err);\n                    }\n                });\n            });\n            if (isOpen) {\n                return randomPort(0);\n            }\n            else {\n                return prefer;\n            }\n        }\n        else {\n            const server = createServer();\n            server.listen({ port: 0, exclusive: true });\n            const port = server.address().port;\n            return new Promise((resolve, reject) => {\n                server.close(err => err ? reject(err) : resolve(port));\n            });\n        }\n    }\n    else {\n        throw new Error(\"Unsupported runtime\");\n    }\n}\nexport async function connect(options) {\n    var _a;\n    if (isDeno) {\n        const createSocket = (impl, startTls) => {\n            const reader = impl.readable.getReader();\n            const closed = asyncTask();\n            const localAddr = impl.localAddr;\n            const remoteAddr = impl.remoteAddr;\n            return new Socket({\n                localAddress: constructNetAddress({\n                    family: localAddr.hostname.includes(\":\") ? \"IPv6\" : \"IPv4\",\n                    hostname: localAddr.hostname,\n                    port: localAddr.port,\n                }),\n                remoteAddress: constructNetAddress({\n                    family: remoteAddr.hostname.includes(\":\") ? \"IPv6\" : \"IPv4\",\n                    hostname: remoteAddr.hostname,\n                    port: remoteAddr.port,\n                }),\n                readable: new ReadableStream({\n                    async pull(controller) {\n                        while (true) {\n                            const { done, value } = await reader.read();\n                            if (done) {\n                                try {\n                                    controller.close();\n                                }\n                                catch (_a) { }\n                                closed.resolve();\n                                break;\n                            }\n                            controller.enqueue(value);\n                        }\n                    },\n                    async cancel(reason) {\n                        await reader.cancel(reason);\n                    },\n                }),\n                writable: impl.writable,\n                closed,\n                close: async () => {\n                    impl.close();\n                    await closed;\n                },\n                startTls,\n                ref: impl.ref.bind(impl),\n                unref: impl.unref.bind(impl),\n            });\n        };\n        const _socket = await Deno.connect(options);\n        return createSocket(_socket, async () => {\n            const __socket = await Deno.startTls(_socket);\n            return createSocket(__socket, async () => {\n                throw new Error(\"TLS already started\");\n            });\n        });\n    }\n    else if (isBun) {\n        const ready = asyncTask();\n        const closed = asyncTask();\n        let readCtrl = null;\n        let writeCtrl = null;\n        const readable = new ReadableStream({\n            start(controller) {\n                readCtrl = controller;\n            },\n        });\n        const writable = new WritableStream({\n            start(controller) {\n                writeCtrl = controller;\n            },\n            write(chunk) {\n                _socket.write(chunk);\n            },\n            close() {\n                _socket.end();\n            },\n        });\n        const _socket = await Bun.connect({\n            ...options,\n            hostname: options.hostname || \"localhost\",\n            socket: {\n                binaryType: \"uint8array\",\n                open() {\n                    ready.resolve();\n                },\n                data(_socket, data) {\n                    readCtrl.enqueue(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n                },\n                close() {\n                    readCtrl.close();\n                    writeCtrl.error();\n                    closed.resolve();\n                },\n                error(_socket, error) {\n                    readCtrl.error(error);\n                    writeCtrl.error(error);\n                    closed.reject(error);\n                },\n            }\n        });\n        await ready;\n        return new Socket({\n            localAddress: constructNetAddress({\n                family: \"IPv4\",\n                hostname: \"localhost\",\n                port: _socket.localPort,\n            }),\n            remoteAddress: constructNetAddress({\n                family: _socket.remoteAddress.includes(\":\") ? \"IPv6\" : \"IPv4\",\n                hostname: _socket.remoteAddress,\n                port: options.port,\n            }),\n            readable,\n            writable,\n            closed,\n            close: async () => {\n                _socket.end();\n                await closed;\n            },\n            startTls: async () => {\n                throw new Error(\"TLS not supported\");\n            },\n            ref: () => _socket.ref(),\n            unref: () => _socket.unref(),\n        });\n    }\n    else if (isNode) {\n        const { createConnection } = await import(\"node:net\");\n        const ready = asyncTask();\n        const closed = asyncTask();\n        let readCtrl = null;\n        let writeCtrl = null;\n        const readable = new ReadableStream({\n            start(controller) {\n                readCtrl = controller;\n            },\n        });\n        const writable = new WritableStream({\n            start(controller) {\n                writeCtrl = controller;\n            },\n            write(chunk) {\n                _socket.write(chunk);\n            },\n            close() {\n                _socket.end();\n            },\n        });\n        const _socket = createConnection(options.port, options.hostname || \"localhost\");\n        _socket.once(\"connect\", () => {\n            ready.resolve();\n        }).on(\"data\", data => {\n            readCtrl.enqueue(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n        }).once(\"error\", (error) => {\n            readCtrl.error(error);\n            writeCtrl.error(error);\n            closed.reject(error);\n            ready.reject(error);\n        }).once(\"close\", (hasError) => {\n            readCtrl.close();\n            writeCtrl.error();\n            hasError || closed.resolve();\n        });\n        await ready;\n        return new Socket({\n            localAddress: constructNetAddress({\n                family: \"IPv4\",\n                hostname: _socket.localAddress || \"localhost\",\n                port: (_a = _socket.localPort) !== null && _a !== void 0 ? _a : 0,\n            }),\n            remoteAddress: constructNetAddress({\n                family: _socket.remoteFamily,\n                hostname: _socket.remoteAddress,\n                port: _socket.remotePort,\n            }),\n            readable,\n            writable,\n            closed,\n            close: async () => {\n                _socket.end();\n                await closed;\n            },\n            startTls: async () => {\n                throw new Error(\"TLS not supported\");\n            },\n            ref: () => _socket.ref(),\n            unref: () => _socket.unref(),\n        });\n    }\n    else {\n        throw new Error(\"Unsupported runtime\");\n    }\n}\n//# sourceMappingURL=net.js.map"],"names":[],"mappings":"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"}