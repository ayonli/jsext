{"version":3,"file":"net.js","sources":["../net.ts"],"sourcesContent":["import { asyncTask } from \"./async.ts\";\nimport { isBun, isDeno, isNode } from \"./env.ts\";\nimport { Socket } from \"./net/types.ts\";\nimport { constructNetAddress } from \"./net/util.ts\";\n/**\n * Returns a random port number that is available for listening.\n *\n * NOTE: This function is not available in the browser and worker runtimes such\n * as Cloudflare Workers.\n *\n * @param prefer The preferred port number to return if it is available,\n * otherwise a random port is returned.\n *\n * @param hostname The hostname to bind the port to. Default is \"0.0.0.0\", only\n * used when `prefer` is set and not `0`.\n */\nexport async function randomPort(prefer = undefined, hostname = undefined) {\n    hostname || (hostname = \"0.0.0.0\");\n    if (isDeno) {\n        try {\n            const listener = Deno.listen({\n                hostname,\n                port: prefer !== null && prefer !== void 0 ? prefer : 0,\n            });\n            const { port } = listener.addr;\n            listener.close();\n            return Promise.resolve(port);\n        }\n        catch (err) {\n            if (prefer) {\n                return randomPort(0);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    else if (isBun) {\n        try {\n            const listener = Bun.listen({\n                hostname,\n                port: prefer !== null && prefer !== void 0 ? prefer : 0,\n                socket: {\n                    data: () => { },\n                },\n            });\n            const { port } = listener;\n            listener.stop(true);\n            return Promise.resolve(port);\n        }\n        catch (err) {\n            if (prefer) {\n                return randomPort(0);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    else if (isNode) {\n        const { createServer, connect } = await import(\"node:net\");\n        if (prefer) {\n            // In Node.js listening on a port used by another process may work,\n            // so we don't use `listen` method to check if the port is available.\n            // Instead, we use the `connect` method to check if the port can be\n            // reached, if so, the port is open and we don't use it.\n            const isOpen = await new Promise((resolve, reject) => {\n                const conn = connect(prefer, hostname === \"0.0.0.0\" ? \"localhost\" : hostname);\n                conn.once(\"connect\", () => {\n                    conn.end();\n                    resolve(true);\n                }).once(\"error\", (err) => {\n                    if (err[\"code\"] === \"ECONNREFUSED\") {\n                        resolve(false);\n                    }\n                    else {\n                        reject(err);\n                    }\n                });\n            });\n            if (isOpen) {\n                return randomPort(0);\n            }\n            else {\n                return prefer;\n            }\n        }\n        else {\n            const server = createServer();\n            server.listen({ port: 0, exclusive: true });\n            const port = server.address().port;\n            return new Promise((resolve, reject) => {\n                server.close(err => err ? reject(err) : resolve(port));\n            });\n        }\n    }\n    else {\n        throw new Error(\"Unsupported runtime\");\n    }\n}\n/**\n * This function provides a unified interface to connect to a TCP server in\n * Node.js, Deno, Bun and Cloudflare Workers, with modern Web APIs.\n *\n * NOTE: This module depends on the Web Streams API, in Node.js, it requires\n * Node.js v18.0 or above.\n *\n * @example\n * ```ts\n * import bytes from \"@ayonli/jsext/bytes\";\n * import { readAsText } from \"@ayonli/jsext/reader\";\n * import { connect } from \"@ayonli/jsext/net\";\n *\n * const socket = await connect({ hostname: \"example.com\", port: 80 });\n * const writer = socket.writable.getWriter();\n *\n * await writer.write(bytes(\"GET / HTTP/1.1\\r\\n\"));\n * await writer.write(bytes(\"Accept: plain/html\\r\\n\"));\n * await writer.write(bytes(\"Host: example.com\\r\\n\"));\n * await writer.write(bytes(\"\\r\\n\"));\n * await writer.close();\n *\n * const message = await readAsText(socket.readable);\n * console.log(message);\n * ```\n */\nexport async function connect(options) {\n    var _a;\n    const { tls = false, ..._options } = options;\n    if (isDeno) {\n        const _socket = tls\n            ? await Deno.connectTls(_options)\n            : await Deno.connect(_options);\n        const localAddr = _socket.localAddr;\n        const remoteAddr = _socket.remoteAddr;\n        const closed = asyncTask();\n        let closeCalled = false;\n        return new Socket({\n            localAddress: constructNetAddress({\n                hostname: localAddr.hostname,\n                port: localAddr.port,\n            }),\n            remoteAddress: constructNetAddress({\n                hostname: remoteAddr.hostname,\n                port: remoteAddr.port,\n            }),\n            readable: new ReadableStream({\n                async pull(controller) {\n                    try {\n                        while (true) {\n                            const value = new Uint8Array(4096);\n                            const n = await _socket.read(value);\n                            if (n === null) {\n                                try {\n                                    controller.close();\n                                }\n                                catch (_a) { }\n                                closed.resolve();\n                                break;\n                            }\n                            controller.enqueue(value.subarray(0, n));\n                        }\n                    }\n                    catch (err) {\n                        try {\n                            controller.error(err);\n                        }\n                        catch (_b) { }\n                        closeCalled ? closed.resolve() : closed.reject(err);\n                    }\n                },\n                cancel(reason) {\n                    reason ? closed.reject(reason) : closed.resolve();\n                    return _socket.close();\n                },\n            }),\n            writable: new WritableStream({\n                async write(chunk) {\n                    await _socket.write(chunk);\n                },\n                async close() {\n                    await _socket.closeWrite();\n                },\n            }),\n            closed,\n            close: async () => {\n                closeCalled = true;\n                _socket.close();\n                await closed;\n            },\n            ref: _socket.ref.bind(_socket),\n            unref: _socket.unref.bind(_socket),\n        });\n    }\n    else if (isBun) {\n        const ready = asyncTask();\n        const closed = asyncTask();\n        let readCtrl = null;\n        let writeCtrl = null;\n        const readable = new ReadableStream({\n            start(controller) {\n                readCtrl = controller;\n            },\n            cancel(reason) {\n                reason ? closed.reject(reason) : closed.resolve();\n                _socket.end();\n            },\n        });\n        const writable = new WritableStream({\n            start(controller) {\n                writeCtrl = controller;\n            },\n            write(chunk) {\n                _socket.write(chunk);\n            },\n            close() {\n                _socket.shutdown();\n            },\n        });\n        const _socket = await Bun.connect({\n            ..._options,\n            tls,\n            socket: {\n                binaryType: \"uint8array\",\n                open() {\n                    ready.resolve();\n                },\n                data(_socket, data) {\n                    readCtrl.enqueue(data);\n                },\n                error(_socket, error) {\n                    try {\n                        readCtrl.error(error);\n                    }\n                    catch (_a) { }\n                    try {\n                        writeCtrl.error(error);\n                    }\n                    catch (_b) { }\n                    closed.reject(error);\n                },\n                close() {\n                    try {\n                        readCtrl.close();\n                    }\n                    catch (_a) { }\n                    try {\n                        writeCtrl.error();\n                    }\n                    catch (_b) { }\n                    closed.resolve();\n                },\n            }\n        });\n        await ready;\n        return new Socket({\n            localAddress: constructNetAddress({\n                hostname: \"localhost\",\n                port: _socket.localPort,\n            }),\n            remoteAddress: constructNetAddress({\n                hostname: _socket.remoteAddress,\n                port: options.port,\n            }),\n            readable,\n            writable,\n            closed,\n            close: async () => {\n                _socket.end();\n                await closed;\n            },\n            ref: () => _socket.ref(),\n            unref: () => _socket.unref(),\n        });\n    }\n    else if (isNode) {\n        const { createConnection } = await import(\"node:net\");\n        const { connect } = await import(\"node:tls\");\n        const ready = asyncTask();\n        const closed = asyncTask();\n        let readCtrl = null;\n        let writeCtrl = null;\n        const readable = new ReadableStream({\n            start(controller) {\n                readCtrl = controller;\n            },\n            cancel(reason) {\n                _socket.destroy(reason);\n            },\n        });\n        const writable = new WritableStream({\n            start(controller) {\n                writeCtrl = controller;\n            },\n            write(chunk) {\n                _socket.write(chunk);\n            },\n            async close() {\n                return new Promise(resolve => {\n                    _socket.end(resolve);\n                });\n            },\n        });\n        const _socket = tls\n            ? connect({\n                ..._options,\n                rejectUnauthorized: false,\n            })\n            : createConnection({\n                host: options.hostname,\n                port: options.port,\n                localPort: 0,\n            });\n        _socket.once(\"connect\", () => {\n            ready.resolve();\n        }).on(\"data\", data => {\n            readCtrl.enqueue(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n        }).once(\"error\", (error) => {\n            try {\n                readCtrl.error(error);\n            }\n            catch (_a) { }\n            try {\n                writeCtrl.error(error);\n            }\n            catch (_b) { }\n            closed.reject(error);\n            ready.reject(error);\n        }).once(\"close\", (hasError) => {\n            if (!hasError) {\n                try {\n                    readCtrl.close();\n                }\n                catch (_a) { }\n                try {\n                    writeCtrl.error();\n                }\n                catch (_b) { }\n                closed.resolve();\n            }\n        });\n        await ready;\n        return new Socket({\n            localAddress: constructNetAddress({\n                hostname: _socket.localAddress || \"localhost\",\n                port: (_a = _socket.localPort) !== null && _a !== void 0 ? _a : 0,\n            }),\n            remoteAddress: constructNetAddress({\n                hostname: _socket.remoteAddress,\n                port: _socket.remotePort,\n            }),\n            readable,\n            writable,\n            closed,\n            close: async () => {\n                _socket.destroy();\n                await closed;\n            },\n            ref: () => _socket.ref(),\n            unref: () => _socket.unref(),\n        });\n    }\n    else {\n        throw new Error(\"Unsupported runtime\");\n    }\n}\n//# sourceMappingURL=net.js.map"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,UAAU,CAAC,MAAM,GAAG,SAAS,EAAE,QAAQ,GAAG,SAAS,EAAE;AAC3E,IAAI,QAAQ,KAAK,QAAQ,GAAG,SAAS,CAAC,CAAC;AACvC,IAAI,IAAI,MAAM,EAAE;AAChB,QAAQ,IAAI;AACZ,YAAY,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;AACzC,gBAAgB,QAAQ;AACxB,gBAAgB,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,GAAG,MAAM,GAAG,CAAC;AACvE,aAAa,CAAC,CAAC;AACf,YAAY,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC;AAC3C,YAAY,QAAQ,CAAC,KAAK,EAAE,CAAC;AAC7B,YAAY,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACzC,SAAS;AACT,QAAQ,OAAO,GAAG,EAAE;AACpB,YAAY,IAAI,MAAM,EAAE;AACxB,gBAAgB,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;AACrC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,GAAG,CAAC;AAC1B,aAAa;AACb,SAAS;AACT,KAAK;AACL,SAAS,IAAI,KAAK,EAAE;AACpB,QAAQ,IAAI;AACZ,YAAY,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC;AACxC,gBAAgB,QAAQ;AACxB,gBAAgB,IAAI,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,GAAG,MAAM,GAAG,CAAC;AACvE,gBAAgB,MAAM,EAAE;AACxB,oBAAoB,IAAI,EAAE,MAAM,GAAG;AACnC,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,YAAY,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;AACtC,YAAY,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,YAAY,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACzC,SAAS;AACT,QAAQ,OAAO,GAAG,EAAE;AACpB,YAAY,IAAI,MAAM,EAAE;AACxB,gBAAgB,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;AACrC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,GAAG,CAAC;AAC1B,aAAa;AACb,SAAS;AACT,KAAK;AACL,SAAS,IAAI,MAAM,EAAE;AACrB,QAAQ,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,MAAM,OAAO,UAAU,CAAC,CAAC;AACnE,QAAQ,IAAI,MAAM,EAAE;AACpB;AACA;AACA;AACA;AACA,YAAY,MAAM,MAAM,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAClE,gBAAgB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,EAAE,QAAQ,KAAK,SAAS,GAAG,WAAW,GAAG,QAAQ,CAAC,CAAC;AAC9F,gBAAgB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM;AAC3C,oBAAoB,IAAI,CAAC,GAAG,EAAE,CAAC;AAC/B,oBAAoB,OAAO,CAAC,IAAI,CAAC,CAAC;AAClC,iBAAiB,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK;AAC1C,oBAAoB,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,cAAc,EAAE;AACxD,wBAAwB,OAAO,CAAC,KAAK,CAAC,CAAC;AACvC,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,MAAM,CAAC,GAAG,CAAC,CAAC;AACpC,qBAAqB;AACrB,iBAAiB,CAAC,CAAC;AACnB,aAAa,CAAC,CAAC;AACf,YAAY,IAAI,MAAM,EAAE;AACxB,gBAAgB,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;AACrC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,OAAO,MAAM,CAAC;AAC9B,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;AAC1C,YAAY,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AACxD,YAAY,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;AAC/C,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AACpD,gBAAgB,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACvE,aAAa,CAAC,CAAC;AACf,SAAS;AACT,KAAK;AACL,SAAS;AACT,QAAQ,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AAC/C,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,OAAO,CAAC,OAAO,EAAE;AACvC,IAAI,IAAI,EAAE,CAAC;AACX,IAAI,MAAM,EAAE,GAAG,GAAG,KAAK,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,CAAC;AACjD,IAAI,IAAI,MAAM,EAAE;AAChB,QAAQ,MAAM,OAAO,GAAG,GAAG;AAC3B,cAAc,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;AAC7C,cAAc,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC3C,QAAQ,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AAC5C,QAAQ,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AAC9C,QAAQ,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;AACnC,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC;AAChC,QAAQ,OAAO,IAAI,MAAM,CAAC;AAC1B,YAAY,YAAY,EAAE,mBAAmB,CAAC;AAC9C,gBAAgB,QAAQ,EAAE,SAAS,CAAC,QAAQ;AAC5C,gBAAgB,IAAI,EAAE,SAAS,CAAC,IAAI;AACpC,aAAa,CAAC;AACd,YAAY,aAAa,EAAE,mBAAmB,CAAC;AAC/C,gBAAgB,QAAQ,EAAE,UAAU,CAAC,QAAQ;AAC7C,gBAAgB,IAAI,EAAE,UAAU,CAAC,IAAI;AACrC,aAAa,CAAC;AACd,YAAY,QAAQ,EAAE,IAAI,cAAc,CAAC;AACzC,gBAAgB,MAAM,IAAI,CAAC,UAAU,EAAE;AACvC,oBAAoB,IAAI;AACxB,wBAAwB,OAAO,IAAI,EAAE;AACrC,4BAA4B,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;AAC/D,4BAA4B,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChE,4BAA4B,IAAI,CAAC,KAAK,IAAI,EAAE;AAC5C,gCAAgC,IAAI;AACpC,oCAAoC,UAAU,CAAC,KAAK,EAAE,CAAC;AACvD,iCAAiC;AACjC,gCAAgC,OAAO,EAAE,EAAE,GAAG;AAC9C,gCAAgC,MAAM,CAAC,OAAO,EAAE,CAAC;AACjD,gCAAgC,MAAM;AACtC,6BAA6B;AAC7B,4BAA4B,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrE,yBAAyB;AACzB,qBAAqB;AACrB,oBAAoB,OAAO,GAAG,EAAE;AAChC,wBAAwB,IAAI;AAC5B,4BAA4B,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClD,yBAAyB;AACzB,wBAAwB,OAAO,EAAE,EAAE,GAAG;AACtC,wBAAwB,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5E,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,MAAM,CAAC,MAAM,EAAE;AAC/B,oBAAoB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;AACtE,oBAAoB,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC;AAC3C,iBAAiB;AACjB,aAAa,CAAC;AACd,YAAY,QAAQ,EAAE,IAAI,cAAc,CAAC;AACzC,gBAAgB,MAAM,KAAK,CAAC,KAAK,EAAE;AACnC,oBAAoB,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,MAAM,KAAK,GAAG;AAC9B,oBAAoB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;AAC/C,iBAAiB;AACjB,aAAa,CAAC;AACd,YAAY,MAAM;AAClB,YAAY,KAAK,EAAE,YAAY;AAC/B,gBAAgB,WAAW,GAAG,IAAI,CAAC;AACnC,gBAAgB,OAAO,CAAC,KAAK,EAAE,CAAC;AAChC,gBAAgB,MAAM,MAAM,CAAC;AAC7B,aAAa;AACb,YAAY,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1C,YAAY,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;AAC9C,SAAS,CAAC,CAAC;AACX,KAAK;AACL,SAAS,IAAI,KAAK,EAAE;AACpB,QAAQ,MAAM,KAAK,GAAG,SAAS,EAAE,CAAC;AAClC,QAAQ,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;AACnC,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC;AAC5B,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC;AAC7B,QAAQ,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC;AAC5C,YAAY,KAAK,CAAC,UAAU,EAAE;AAC9B,gBAAgB,QAAQ,GAAG,UAAU,CAAC;AACtC,aAAa;AACb,YAAY,MAAM,CAAC,MAAM,EAAE;AAC3B,gBAAgB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;AAClE,gBAAgB,OAAO,CAAC,GAAG,EAAE,CAAC;AAC9B,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC;AAC5C,YAAY,KAAK,CAAC,UAAU,EAAE;AAC9B,gBAAgB,SAAS,GAAG,UAAU,CAAC;AACvC,aAAa;AACb,YAAY,KAAK,CAAC,KAAK,EAAE;AACzB,gBAAgB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrC,aAAa;AACb,YAAY,KAAK,GAAG;AACpB,gBAAgB,OAAO,CAAC,QAAQ,EAAE,CAAC;AACnC,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC;AAC1C,YAAY,GAAG,QAAQ;AACvB,YAAY,GAAG;AACf,YAAY,MAAM,EAAE;AACpB,gBAAgB,UAAU,EAAE,YAAY;AACxC,gBAAgB,IAAI,GAAG;AACvB,oBAAoB,KAAK,CAAC,OAAO,EAAE,CAAC;AACpC,iBAAiB;AACjB,gBAAgB,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE;AACpC,oBAAoB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3C,iBAAiB;AACjB,gBAAgB,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE;AACtC,oBAAoB,IAAI;AACxB,wBAAwB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC9C,qBAAqB;AACrB,oBAAoB,OAAO,EAAE,EAAE,GAAG;AAClC,oBAAoB,IAAI;AACxB,wBAAwB,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC/C,qBAAqB;AACrB,oBAAoB,OAAO,EAAE,EAAE,GAAG;AAClC,oBAAoB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACzC,iBAAiB;AACjB,gBAAgB,KAAK,GAAG;AACxB,oBAAoB,IAAI;AACxB,wBAAwB,QAAQ,CAAC,KAAK,EAAE,CAAC;AACzC,qBAAqB;AACrB,oBAAoB,OAAO,EAAE,EAAE,GAAG;AAClC,oBAAoB,IAAI;AACxB,wBAAwB,SAAS,CAAC,KAAK,EAAE,CAAC;AAC1C,qBAAqB;AACrB,oBAAoB,OAAO,EAAE,EAAE,GAAG;AAClC,oBAAoB,MAAM,CAAC,OAAO,EAAE,CAAC;AACrC,iBAAiB;AACjB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,KAAK,CAAC;AACpB,QAAQ,OAAO,IAAI,MAAM,CAAC;AAC1B,YAAY,YAAY,EAAE,mBAAmB,CAAC;AAC9C,gBAAgB,QAAQ,EAAE,WAAW;AACrC,gBAAgB,IAAI,EAAE,OAAO,CAAC,SAAS;AACvC,aAAa,CAAC;AACd,YAAY,aAAa,EAAE,mBAAmB,CAAC;AAC/C,gBAAgB,QAAQ,EAAE,OAAO,CAAC,aAAa;AAC/C,gBAAgB,IAAI,EAAE,OAAO,CAAC,IAAI;AAClC,aAAa,CAAC;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,MAAM;AAClB,YAAY,KAAK,EAAE,YAAY;AAC/B,gBAAgB,OAAO,CAAC,GAAG,EAAE,CAAC;AAC9B,gBAAgB,MAAM,MAAM,CAAC;AAC7B,aAAa;AACb,YAAY,GAAG,EAAE,MAAM,OAAO,CAAC,GAAG,EAAE;AACpC,YAAY,KAAK,EAAE,MAAM,OAAO,CAAC,KAAK,EAAE;AACxC,SAAS,CAAC,CAAC;AACX,KAAK;AACL,SAAS,IAAI,MAAM,EAAE;AACrB,QAAQ,MAAM,EAAE,gBAAgB,EAAE,GAAG,MAAM,OAAO,UAAU,CAAC,CAAC;AAC9D,QAAQ,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,OAAO,UAAU,CAAC,CAAC;AACrD,QAAQ,MAAM,KAAK,GAAG,SAAS,EAAE,CAAC;AAClC,QAAQ,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;AACnC,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC;AAC5B,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC;AAC7B,QAAQ,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC;AAC5C,YAAY,KAAK,CAAC,UAAU,EAAE;AAC9B,gBAAgB,QAAQ,GAAG,UAAU,CAAC;AACtC,aAAa;AACb,YAAY,MAAM,CAAC,MAAM,EAAE;AAC3B,gBAAgB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACxC,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC;AAC5C,YAAY,KAAK,CAAC,UAAU,EAAE;AAC9B,gBAAgB,SAAS,GAAG,UAAU,CAAC;AACvC,aAAa;AACb,YAAY,KAAK,CAAC,KAAK,EAAE;AACzB,gBAAgB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrC,aAAa;AACb,YAAY,MAAM,KAAK,GAAG;AAC1B,gBAAgB,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI;AAC9C,oBAAoB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACzC,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,OAAO,GAAG,GAAG;AAC3B,cAAc,OAAO,CAAC;AACtB,gBAAgB,GAAG,QAAQ;AAC3B,gBAAgB,kBAAkB,EAAE,KAAK;AACzC,aAAa,CAAC;AACd,cAAc,gBAAgB,CAAC;AAC/B,gBAAgB,IAAI,EAAE,OAAO,CAAC,QAAQ;AACtC,gBAAgB,IAAI,EAAE,OAAO,CAAC,IAAI;AAClC,gBAAgB,SAAS,EAAE,CAAC;AAC5B,aAAa,CAAC,CAAC;AACf,QAAQ,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM;AACtC,YAAY,KAAK,CAAC,OAAO,EAAE,CAAC;AAC5B,SAAS,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,IAAI;AAC9B,YAAY,QAAQ,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;AAC5F,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,KAAK;AACpC,YAAY,IAAI;AAChB,gBAAgB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACtC,aAAa;AACb,YAAY,OAAO,EAAE,EAAE,GAAG;AAC1B,YAAY,IAAI;AAChB,gBAAgB,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACvC,aAAa;AACb,YAAY,OAAO,EAAE,EAAE,GAAG;AAC1B,YAAY,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACjC,YAAY,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAChC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,KAAK;AACvC,YAAY,IAAI,CAAC,QAAQ,EAAE;AAC3B,gBAAgB,IAAI;AACpB,oBAAoB,QAAQ,CAAC,KAAK,EAAE,CAAC;AACrC,iBAAiB;AACjB,gBAAgB,OAAO,EAAE,EAAE,GAAG;AAC9B,gBAAgB,IAAI;AACpB,oBAAoB,SAAS,CAAC,KAAK,EAAE,CAAC;AACtC,iBAAiB;AACjB,gBAAgB,OAAO,EAAE,EAAE,GAAG;AAC9B,gBAAgB,MAAM,CAAC,OAAO,EAAE,CAAC;AACjC,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,KAAK,CAAC;AACpB,QAAQ,OAAO,IAAI,MAAM,CAAC;AAC1B,YAAY,YAAY,EAAE,mBAAmB,CAAC;AAC9C,gBAAgB,QAAQ,EAAE,OAAO,CAAC,YAAY,IAAI,WAAW;AAC7D,gBAAgB,IAAI,EAAE,CAAC,EAAE,GAAG,OAAO,CAAC,SAAS,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;AACjF,aAAa,CAAC;AACd,YAAY,aAAa,EAAE,mBAAmB,CAAC;AAC/C,gBAAgB,QAAQ,EAAE,OAAO,CAAC,aAAa;AAC/C,gBAAgB,IAAI,EAAE,OAAO,CAAC,UAAU;AACxC,aAAa,CAAC;AACd,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,MAAM;AAClB,YAAY,KAAK,EAAE,YAAY;AAC/B,gBAAgB,OAAO,CAAC,OAAO,EAAE,CAAC;AAClC,gBAAgB,MAAM,MAAM,CAAC;AAC7B,aAAa;AACb,YAAY,GAAG,EAAE,MAAM,OAAO,CAAC,GAAG,EAAE;AACpC,YAAY,KAAK,EAAE,MAAM,OAAO,CAAC,KAAK,EAAE;AACxC,SAAS,CAAC,CAAC;AACX,KAAK;AACL,SAAS;AACT,QAAQ,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AAC/C,KAAK;AACL;;;;"}