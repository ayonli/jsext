{"version":3,"file":"progress.js","sources":["../../dialog/progress.ts"],"sourcesContent":["import { isBrowserWindow, isDeno, isNodeLike } from \"../env.ts\";\nimport { throwUnsupportedRuntimeError } from \"../error.ts\";\n/**\n * Displays a dialog with a progress bar indicating the ongoing state of the\n * `fn` function, and to wait until the job finishes or the user cancels the\n * dialog.\n *\n * @param onAbort If provided, the dialog will show a cancel button (or listen\n * for Escape in CLI) that allows the user to abort the task. This function can\n * either return a default/fallback result or throw an error to indicate the\n * cancellation.\n *\n * @example\n * ```ts\n * // default usage\n * import { progress } from \"@ayonli/jsext/dialog\";\n *\n * const result = await progress(\"Processing...\", async () => {\n *     // ... some long-running task\n *     return { ok: true };\n * });\n *\n * console.log(result); // { ok: true }\n * ```\n *\n * @example\n * ```ts\n * // update state\n * import { progress } from \"@ayonli/jsext/dialog\";\n *\n * const result = await progress(\"Processing...\", async (set) => {\n *     set({ percent: 0 });\n *     // ... some long-running task\n *     set({ percent: 50, message: \"Halfway there!\" });\n *     // ... some long-running task\n *     set({ percent: 100 });\n *\n *     return { ok: true };\n * });\n *\n * console.log(result); // { ok: true }\n * ```\n *\n * @example\n * ```ts\n * // abortable\n * import { progress } from \"@ayonli/jsext/dialog\";\n *\n * const result = await progress(\"Processing...\", async (set, signal) => {\n *     set({ percent: 0 });\n *\n *     if (!signal.aborted) {\n *         // ... some long-running task\n *         set({ percent: 50, message: \"Halfway there!\" });\n *     }\n *\n *     if (!signal.aborted) {\n *         // ... some long-running task\n *         set({ percent: 100 });\n *     }\n *\n *     return { ok: true };\n * }, () => {\n *     return { ok: false };\n * });\n *\n * console.log(result); // { ok: true } or { ok: false }\n * ```\n */\nexport default async function progress(message, fn, onAbort = undefined) {\n    if (isBrowserWindow) {\n        const { progress } = await import(\"./web.ts\");\n        return await progress(message, fn, onAbort);\n    }\n    else if (isDeno || isNodeLike) {\n        const { default: progress } = await import(\"./cli/progress.ts\");\n        return await progress(message, fn, onAbort);\n    }\n    else {\n        throwUnsupportedRuntimeError();\n    }\n}\n//# sourceMappingURL=progress.js.map"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,eAAe,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,GAAG,SAAS,EAAE;AACzE,IAAI,IAAI,eAAe,EAAE;AACzB,QAAQ,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,UAAU,CAAC,CAAC;AACtD,QAAQ,OAAO,MAAM,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;AACpD,KAAK;AACL,SAAS,IAAI,MAAM,IAAI,UAAU,EAAE;AACnC,QAAQ,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,mBAAmB,CAAC,CAAC;AACxE,QAAQ,OAAO,MAAM,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;AACpD,KAAK;AACL,SAAS;AACT,QAAQ,4BAA4B,EAAE,CAAC;AACvC,KAAK;AACL;;;;"}