/**
 * Utility functions for working with JavaScript modules.
 * @module 
 */

import { isBrowser } from "./env.ts";

/**
 * Performs interop on the given module. This functions is used to fix CommonJS
 * module imports in Node.js ES module files.
 * 
 * By default, this function will check the module object for characteristics of
 * CommonJS modules and perform interoperability smartly.
 * 
 * But sometimes, this behavior is not guaranteed, for example, when the `module`
 * is an ES module and it does have a default export as an object, or the
 * `module.exports` is the only export in the CommonJS file. In this case,
 * this function will be confused and may return the undesired object.
 * 
 * To fix this, you can set the `strict` parameter to `true`, so this function
 * will only return the `exports` object when the module also has an `__esModule`
 * property, which is a common pattern generated by TypeScript for CommonJS
 * files.
 * 
 * Or you can set the `strict` parameter to `false`, so this function will
 * always return the `default` object if it exists in `module`, which is the
 * target that Node.js uses to alias the `module.exports` object for CommonJS
 * modules.
 */
export function interop<T extends { [x: string]: any; }>(
    module: () => Promise<T>,
    strict?: boolean
): Promise<T>;
export function interop<T extends { [x: string]: any; }>(
    module: Promise<T>,
    strict?: boolean
): Promise<T>;
export function interop<T extends { [x: string]: any; }>(module: T, strict?: boolean): T;
export function interop<T extends { [x: string]: any; }>(
    module: T | Promise<T> | (() => Promise<T>),
    strict: boolean | undefined = undefined
): T | Promise<T> {
    if (typeof module === "function") {
        return module().then(mod => interop(mod, strict)) as Promise<T>;
    } else if (module instanceof Promise) {
        return module.then(mod => interop(mod, strict)) as Promise<T>;
    } else if (typeof module === "object" && module !== null && !Array.isArray(module)) {
        if (typeof module["default"] === "object" &&
            module["default"] !== null &&
            !Array.isArray(module["default"])
        ) {
            const hasEsModule = module["__esModule"] === true
                || module["default"]["__esModule"] === true;

            if (hasEsModule) {
                return module["default"];
            } else if (strict) {
                return module;
            }

            const moduleKeys = Object.getOwnPropertyNames(module)
                .filter(x => x !== "default" && x !== "__esModule").sort();
            const defaultKeys = Object.getOwnPropertyNames(module["default"])
                .filter(x => x !== "default" && x !== "__esModule").sort();

            if (String(moduleKeys) === String(defaultKeys)) {
                return module["default"];
            } else if (strict === false && !moduleKeys.length) {
                return module["default"];
            }
        }
    }

    return module;
}

const importCache = new Map<string, Promise<void>>();

/**
 * Imports a script from the given URL to the current document, useful when
 * loading 3rd-party libraries dynamically in the browser.
 * 
 * NOTE: this function will throw an error if called outside the browser.
 */
export function importScript(url: string, options: {
    type?: "classic" | "module";
} = {}): Promise<void> {
    if (!isBrowser) {
        return Promise.reject(new Error("This function is only available in the browser."));
    }

    url = new URL(url, location.href).href;
    let cache = importCache.get(url);

    if (cache) {
        return cache;
    }

    cache = new Promise<void>((resolve, reject) => {
        const script = document.createElement("script");

        script.src = url;
        script.type = options.type === "module" ? "module" : "text/javascript";
        script.onload = () => setTimeout(resolve, 0);
        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
        document.head.appendChild(script);
    });

    importCache.set(url, cache);
    return cache;
}

/**
 * Imports a stylesheet from the given URL to the current document, useful when
 * loading 3rd-party libraries dynamically in the browser.
 * 
 * NOTE: this function will throw an error if called outside the browser.
 */
export function importStylesheet(url: string): Promise<void> {
    if (!isBrowser) {
        return Promise.reject(new Error("This function is only available in the browser."));
    }

    url = new URL(url, location.href).href;
    let cache = importCache.get(url);

    if (cache) {
        return cache;
    }

    cache = new Promise<void>((resolve, reject) => {
        const link = document.createElement("link");

        link.href = url;
        link.rel = "stylesheet";
        link.onload = () => setTimeout(resolve, 0);
        link.onerror = () => reject(new Error(`Failed to load stylesheet: ${url}`));
        document.head.appendChild(link);
    });

    importCache.set(url, cache);
    return cache;
}
